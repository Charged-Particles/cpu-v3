{
  "address": "0x2D2f186BB2579A6A7995e7ABFd13daf1d12196ED",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipCycle",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "ExecutionControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "hasPermission",
          "type": "bool"
        }
      ],
      "name": "PermissionUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChargedParticles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        }
      ],
      "name": "getCovalentBonds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExecutionController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        }
      ],
      "name": "getPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isReceiving",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "handleNFTBatchUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isReceiving",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "handleNFTUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isReceiving",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "assetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        }
      ],
      "name": "handleTokenUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "chargedParticles",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "executionController",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "isValidSigner",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "receivedTokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "permissions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "chargedParticles",
          "type": "address"
        }
      ],
      "name": "setChargedParticles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "executionController",
          "type": "address"
        }
      ],
      "name": "setExecutionController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "callers",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "newPermissions",
          "type": "bool[]"
        }
      ],
      "name": "setPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfd28bc21ae98737cac773fee7a34ffeb36a6abe4efd8df11bf57cee20f61eb4d",
  "receipt": {
    "to": null,
    "from": "0x2BB8CBAd36D52708a43DE36a9Aa2782fFa0470F1",
    "contractAddress": "0x2D2f186BB2579A6A7995e7ABFd13daf1d12196ED",
    "transactionIndex": 1,
    "gasUsed": "1614488",
    "logsBloom": "0x
    "blockHash": "0x3a82bcc5b8a3ac3c36256c1c7b6b5d4139bb95000201a3f6418bb449424fea27",
    "transactionHash": "0xfd28bc21ae98737cac773fee7a34ffeb36a6abe4efd8df11bf57cee20f61eb4d",
    "logs": [],
    "blockNumber": 16292001,
    "cumulativeGasUsed": "1669539",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bea157668a848c283a80316c80ff022e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipCycle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ExecutionControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasPermission\",\"type\":\"bool\"}],\"name\":\"PermissionUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChargedParticles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"getCovalentBonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExecutionController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"}],\"name\":\"getPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isReceiving\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"handleNFTBatchUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isReceiving\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"handleNFTUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isReceiving\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"handleTokenUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chargedParticles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executionController\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isValidSigner\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receivedTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chargedParticles\",\"type\":\"address\"}],\"name\":\"setChargedParticles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executionController\",\"type\":\"address\"}],\"name\":\"setExecutionController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"callers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"newPermissions\",\"type\":\"bool[]\"}],\"name\":\"setPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"execute(address,uint256,bytes,uint8)\":{\"details\":\"executes a low-level call against an account if the caller is authorized to make calls\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Allows ERC-1155 token batches to be received. This function can be overriden.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Allows ERC-1155 tokens to be received. This function can be overriden.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Allows ERC-721 tokens to be received so long as they do not cause an ownership cycle. This function can be overriden.\"},\"owner()\":{\"details\":\"Returns the owner of the ERC-721 token which owns this account. By default, the owner of the token has full permissions on the account.\"},\"setPermissions(address[],bool[])\":{\"details\":\"grants a given caller execution permissions\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if a given interfaceId is supported by this account. This method can be extended by an override.\"},\"token()\":{\"details\":\"Returns the EIP-155 chain ID, token contract address, and token ID for the token that owns this account.\"}},\"stateVariables\":{\"state\":{\"details\":\"Returns a value that SHOULD be modified each time the account changes state.\",\"return\":\"The current account state\",\"returns\":{\"_0\":\"The current account state\"}}},\"title\":\"A smart contract account owned by a single ERC721 token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SmartAccount.sol\":\"SmartAccount\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/SmartAccount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// SmartAccount.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2024 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity ^0.8.13;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {NftTokenInfo} from \\\"./lib/NftTokenInfo.sol\\\";\\nimport {SmartAccountBase, NotAuthorized, InvalidInput} from \\\"./lib/SmartAccountBase.sol\\\";\\n\\n/**\\n * @title A smart contract account owned by a single ERC721 token\\n */\\ncontract SmartAccount is SmartAccountBase {\\n  using NftTokenInfo for address;\\n\\n  uint256 public state;\\n\\n  constructor() SmartAccountBase() {}\\n\\n\\n  /// @dev allows eth transfers by default\\n  receive() external payable virtual override {}\\n\\n\\n\\n  function getPrincipal(address assetToken) external view virtual override returns (uint256 total) {\\n    total = IERC20(assetToken).balanceOf(address(this));\\n  }\\n\\n  function getInterest(address /* assetToken */) external view virtual override returns (uint256 total) {\\n    return 0;\\n  }\\n\\n  function getRewards(address /* assetToken */) external view virtual override returns (uint256 total) {\\n    return 0;\\n  }\\n\\n  function getCovalentBonds(address nftContractAddress, uint256 nftTokenId) external view virtual override returns (uint256 total) {\\n    if (nftContractAddress.isERC1155()) {\\n      total = IERC1155(nftContractAddress).balanceOf(address(this), nftTokenId);\\n    } else {\\n      total = IERC721(nftContractAddress).balanceOf(address(this));\\n    }\\n  }\\n\\n\\n\\n  /// @dev executes a low-level call against an account if the caller is authorized to make calls\\n  function execute(\\n    address to,\\n    uint256 value,\\n    bytes calldata data,\\n    uint8 operation\\n  )\\n    public\\n    payable\\n    virtual\\n    override\\n    onlyValidSigner\\n    returns (bytes memory)\\n  {\\n    require(operation == 0, \\\"Only call operations are supported\\\");\\n    ++state;\\n\\n    // Perform custom checks/updates from within a custom controller\\n    _onExecute(to, value, data, operation);\\n\\n    // Execute Call on Account\\n    return _call(to, value, data);\\n  }\\n\\n\\n  function handleTokenUpdate(\\n    bool isReceiving,\\n    address assetToken,\\n    uint256 assetAmount\\n  )\\n    public\\n    virtual\\n    override\\n    onlyValidSigner\\n  {\\n    // Perform custom checks/updates from within a custom controller\\n    _onUpdateToken(isReceiving, assetToken, assetAmount);\\n  }\\n\\n  function handleNFTUpdate(\\n    bool isReceiving,\\n    address tokenContract,\\n    uint256 tokenId,\\n    uint256 tokenAmount\\n  )\\n    public\\n    virtual\\n    override\\n    onlyValidSigner\\n  {\\n    // Perform custom checks/updates from within a custom controller\\n    _onUpdateNFT(isReceiving, tokenContract, tokenId, tokenAmount);\\n  }\\n\\n  function handleNFTBatchUpdate(\\n    bool isReceiving,\\n    address tokenContract,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata tokenAmounts\\n  )\\n    public\\n    virtual\\n    override\\n    onlyValidSigner\\n  {\\n    // Perform custom checks/updates from within a custom controller\\n    _onUpdateNFTBatch(isReceiving, tokenContract, tokenIds, tokenAmounts);\\n  }\\n}\",\"keccak256\":\"0xa95d9d4e8d40404593e00f79da01b4a174ffbe27d4d12b39a1902137bc36a0d6\",\"license\":\"MIT\"},\"contracts/interfaces/IERC6551Account.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\n/// @dev the ERC-165 identifier for this interface is `0x6faff5f1`\\ninterface IERC6551Account {\\n    /**\\n     * @dev Allows the account to receive Ether.\\n     *\\n     * Accounts MUST implement a `receive` function.\\n     *\\n     * Accounts MAY perform arbitrary logic to restrict conditions\\n     * under which Ether can be received.\\n     */\\n    receive() external payable;\\n\\n    /**\\n     * @dev Returns the identifier of the non-fungible token which owns the account.\\n     *\\n     * The return value of this function MUST be constant - it MUST NOT change over time.\\n     *\\n     * @return chainId       The chain ID of the chain the token exists on\\n     * @return tokenContract The contract address of the token\\n     * @return tokenId       The ID of the token\\n     */\\n    function token()\\n        external\\n        view\\n        returns (uint256 chainId, address tokenContract, uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a value that SHOULD be modified each time the account changes state.\\n     *\\n     * @return The current account state\\n     */\\n    function state() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a magic value indicating whether a given signer is authorized to act on behalf\\n     * of the account.\\n     *\\n     * MUST return the bytes4 magic value 0x523e3260 if the given signer is valid.\\n     *\\n     * By default, the holder of the non-fungible token the account is bound to MUST be considered\\n     * a valid signer.\\n     *\\n     * Accounts MAY implement additional authorization logic which invalidates the holder as a\\n     * signer or grants signing permissions to other non-holder accounts.\\n     *\\n     * @param  signer     The address to check signing authorization for\\n     * @param  context    Additional data used to determine whether the signer is valid\\n     * @return magicValue Magic value indicating whether the signer is valid\\n     */\\n    function isValidSigner(address signer, bytes calldata context)\\n        external\\n        view\\n        returns (bytes4 magicValue);\\n}\\n\\n\",\"keccak256\":\"0x9972b9769e138d0f5855d5f0990dc9942977088e6fc5a9b1e289431f8e213339\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC6551Executable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\n/// @dev the ERC-165 identifier for this interface is `0x51945447`\\ninterface IERC6551Executable {\\n    /**\\n     * @dev Executes a low-level operation if the caller is a valid signer on the account.\\n     *\\n     * Reverts and bubbles up error if operation fails.\\n     *\\n     * Accounts implementing this interface MUST accept the following operation parameter values:\\n     * - 0 = CALL\\n     * - 1 = DELEGATECALL\\n     * - 2 = CREATE\\n     * - 3 = CREATE2\\n     *\\n     * Accounts implementing this interface MAY support additional operations or restrict a signer's\\n     * ability to execute certain operations.\\n     *\\n     * @param to        The target address of the operation\\n     * @param value     The Ether value to be sent to the target\\n     * @param data      The encoded operation calldata\\n     * @param operation A value indicating the type of operation to perform\\n     * @return The result of the operation\\n     */\\n    function execute(address to, uint256 value, bytes calldata data, uint8 operation)\\n        external\\n        payable\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x4b24c8509ccf2fc6fd9744df0c994809133522991951dc7c467120b04f683051\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISmartAccount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// ISmartAccount.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2024 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity ^0.8.13;\\n\\nimport {IERC6551Account} from \\\"../interfaces/IERC6551Account.sol\\\";\\nimport {IERC6551Executable} from \\\"../interfaces/IERC6551Executable.sol\\\";\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\n/**\\n * @title A smart contract account owned by a single ERC721 token\\n */\\ninterface ISmartAccount is\\n  IERC165,\\n  IERC6551Account,\\n  IERC6551Executable,\\n  IERC721Receiver,\\n  IERC1155Receiver\\n{\\n  event PermissionUpdated(address owner, address caller, bool hasPermission);\\n  event ExecutionControllerUpdated(address owner, address controller);\\n\\n  function isInitialized() external returns (bool);\\n  function initialize(\\n    address chargedParticles,\\n    address executionController\\n  ) external;\\n\\n  function getPrincipal(address assetToken) external view returns (uint256 total);\\n  function getInterest(address assetToken) external view returns (uint256 total);\\n  function getRewards(address assetToken) external view returns (uint256 total);\\n  function getCovalentBonds(address nftContractAddress, uint256 nftTokenId) external view returns (uint256 total);\\n\\n  function handleTokenUpdate(\\n    bool isReceiving,\\n    address assetToken,\\n    uint256 assetAmount\\n  ) external;\\n\\n  function handleNFTUpdate(\\n    bool isReceiving,\\n    address tokenContract,\\n    uint256 tokenId,\\n    uint256 tokenAmount\\n  ) external;\\n\\n  function handleNFTBatchUpdate(\\n    bool isReceiving,\\n    address tokenContract,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata tokenAmounts\\n  ) external;\\n}\",\"keccak256\":\"0x2ca813444199ff3ac13ab743210d2039d2bffd996054a28ff4808789a7fc6c75\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartAccountController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title\\n */\\ninterface ISmartAccountController is IERC165 {\\n  function onExecute(\\n    address to,\\n    uint256 value,\\n    bytes calldata data,\\n    uint8 operation\\n  ) external returns (string memory revertReason);\\n\\n  function onUpdateToken(\\n    bool isReceiving,\\n    uint256 chainId,\\n    address tokenContract,\\n    uint256 tokenId,\\n    address receivedAssetToken,\\n    uint256 receivedAssetAmount\\n  ) external;\\n\\n  function onUpdateNFT(\\n    bool isReceiving,\\n    uint256 chainId,\\n    address tokenContract,\\n    uint256 tokenId,\\n    address receivedTokenContract,\\n    uint256 receivedTokenId,\\n    uint256 receivedTokenAmount\\n  ) external;\\n\\n  function onUpdateNFTBatch(\\n    bool isReceiving,\\n    uint256 chainId,\\n    address tokenContract,\\n    uint256 tokenId,\\n    address receivedTokenContract,\\n    uint256[] calldata receivedTokenIds,\\n    uint256[] calldata receivedTokenAmounts\\n  ) external;\\n}\\n\",\"keccak256\":\"0x5e88c28a39826906d5490c52fc767d7f3e3a6536b13e9949f7d689f378213001\",\"license\":\"UNLICENSED\"},\"contracts/lib/ERC6551AccountLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"./ERC6551BytecodeLib.sol\\\";\\n\\nlibrary ERC6551AccountLib {\\n    function computeAddress(\\n        address registry,\\n        address _implementation,\\n        bytes32 _salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) internal pure returns (address) {\\n        bytes32 bytecodeHash = keccak256(\\n            ERC6551BytecodeLib.getCreationCode(\\n                _implementation, _salt, chainId, tokenContract, tokenId\\n            )\\n        );\\n\\n        return Create2.computeAddress(_salt, bytecodeHash, registry);\\n    }\\n\\n    function isERC6551Account(address account, address expectedImplementation, address registry)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // invalid bytecode size\\n        if (account.code.length != 0xAD) return false;\\n\\n        address _implementation = implementation(account);\\n\\n        // implementation does not exist\\n        if (_implementation.code.length == 0) return false;\\n\\n        // invalid implementation\\n        if (_implementation != expectedImplementation) return false;\\n\\n        (bytes32 _salt, uint256 chainId, address tokenContract, uint256 tokenId) = context(account);\\n\\n        return account\\n            == computeAddress(registry, _implementation, _salt, chainId, tokenContract, tokenId);\\n    }\\n\\n    function implementation(address account) internal view returns (address _implementation) {\\n        assembly {\\n            // copy proxy implementation (0x14 bytes)\\n            extcodecopy(account, 0xC, 0xA, 0x14)\\n            _implementation := mload(0x00)\\n        }\\n    }\\n\\n    function implementation() internal view returns (address _implementation) {\\n        return implementation(address(this));\\n    }\\n\\n    function token(address account) internal view returns (uint256, address, uint256) {\\n        bytes memory encodedData = new bytes(0x60);\\n\\n        assembly {\\n            // copy 0x60 bytes from end of context\\n            extcodecopy(account, add(encodedData, 0x20), 0x4d, 0x60)\\n        }\\n\\n        return abi.decode(encodedData, (uint256, address, uint256));\\n    }\\n\\n    function token() internal view returns (uint256, address, uint256) {\\n        return token(address(this));\\n    }\\n\\n    function salt(address account) internal view returns (bytes32) {\\n        bytes memory encodedData = new bytes(0x20);\\n\\n        assembly {\\n            // copy 0x20 bytes from beginning of context\\n            extcodecopy(account, add(encodedData, 0x20), 0x2d, 0x20)\\n        }\\n\\n        return abi.decode(encodedData, (bytes32));\\n    }\\n\\n    function salt() internal view returns (bytes32) {\\n        return salt(address(this));\\n    }\\n\\n    function context(address account) internal view returns (bytes32, uint256, address, uint256) {\\n        bytes memory encodedData = new bytes(0x80);\\n\\n        assembly {\\n            // copy full context (0x80 bytes)\\n            extcodecopy(account, add(encodedData, 0x20), 0x2D, 0x80)\\n        }\\n\\n        return abi.decode(encodedData, (bytes32, uint256, address, uint256));\\n    }\\n\\n    function context() internal view returns (bytes32, uint256, address, uint256) {\\n        return context(address(this));\\n    }\\n}\",\"keccak256\":\"0x5f8d8bcdc3a5ef2364826050ff085a55715b18a9c119111121c306d44b006215\",\"license\":\"MIT\"},\"contracts/lib/ERC6551BytecodeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary ERC6551BytecodeLib {\\n    /**\\n     * @dev Returns the creation code of the token bound account for a non-fungible token.\\n     *\\n     * @return result The creation code of the token bound account\\n     */\\n    function getCreationCode(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) internal pure returns (bytes memory result) {\\n        assembly {\\n            result := mload(0x40) // Grab the free memory pointer\\n            // Layout the variables and bytecode backwards\\n            mstore(add(result, 0xb7), tokenId)\\n            mstore(add(result, 0x97), shr(96, shl(96, tokenContract)))\\n            mstore(add(result, 0x77), chainId)\\n            mstore(add(result, 0x57), salt)\\n            mstore(add(result, 0x37), 0x5af43d82803e903d91602b57fd5bf3)\\n            mstore(add(result, 0x28), implementation)\\n            mstore(add(result, 0x14), 0x3d60ad80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(result, 0xb7) // Store the length\\n            mstore(0x40, add(result, 0xd7)) // Allocate the memory\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the create2 address computed from `salt`, `bytecodeHash`, `deployer`.\\n     *\\n     * @return result The create2 address computed from `salt`, `bytecodeHash`, `deployer`\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer)\\n        internal\\n        pure\\n        returns (address result)\\n    {\\n        assembly {\\n            result := mload(0x40) // Grab the free memory pointer\\n            mstore8(result, 0xff)\\n            mstore(add(result, 0x35), bytecodeHash)\\n            mstore(add(result, 0x01), shl(96, deployer))\\n            mstore(add(result, 0x15), salt)\\n            result := keccak256(result, 0x55)\\n        }\\n    }\\n}\",\"keccak256\":\"0x1f0300c4a8633e7712f22c6c2e7bca25e1647fbcdf31ffe5a28584a0934aa73c\",\"license\":\"MIT\"},\"contracts/lib/NftTokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// NftTokenInfo.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2024 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity ^0.8.13;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\nlibrary NftTokenInfo {\\n  bytes4 constant internal INTERFACE_SIGNATURE_ERC721 = 0x80ac58cd;\\n  bytes4 constant internal INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\\n\\n  function isERC721(address contractAddress) internal view returns (bool) {\\n    return IERC165(contractAddress).supportsInterface(INTERFACE_SIGNATURE_ERC721);\\n  }\\n\\n  function isERC1155(address contractAddress) internal view returns (bool) {\\n    return IERC165(contractAddress).supportsInterface(INTERFACE_SIGNATURE_ERC1155);\\n  }\\n\\n  function getTokenUUID(address contractAddress, uint256 tokenId) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(contractAddress, tokenId)));\\n  }\\n\\n  function getTokenOwner(address contractAddress, uint256 tokenId) internal returns (address) {\\n    return _getTokenOwner(contractAddress, tokenId);\\n  }\\n\\n  function isNFTOwnerOrOperator(address contractAddress, uint256 tokenId, address sender) internal returns (bool) {\\n    IERC721 tokenInterface = IERC721(contractAddress);\\n    address tokenOwner = _getTokenOwner(contractAddress, tokenId);\\n    return (sender == tokenOwner || tokenInterface.isApprovedForAll(tokenOwner, sender));\\n  }\\n\\n  function _getTokenOwner(address contractAddress, uint256 tokenId) internal returns (address) {\\n    // solhint-disable-next-line\\n    (bool success, bytes memory returnData) = contractAddress.call(abi.encodeWithSelector(IERC721.ownerOf.selector, tokenId));\\n    if (success) {\\n      return abi.decode(returnData, (address));\\n    } else {\\n      return address(0x0);\\n    }\\n  }\\n}\",\"keccak256\":\"0x36eae044aeda0b12bc47f86efe60ca291e9194fae8e5c6ad17e04b2b5ba9db56\",\"license\":\"MIT\"},\"contracts/lib/SmartAccountBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// SmartAccountBase.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2024 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity ^0.8.13;\\n\\nimport {IERC165, ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\nimport {IERC6551Account} from \\\"../interfaces/IERC6551Account.sol\\\";\\nimport {ERC6551AccountLib} from \\\"../lib/ERC6551AccountLib.sol\\\";\\nimport {IERC6551Executable} from \\\"../interfaces/IERC6551Executable.sol\\\";\\n\\nimport {ISmartAccount} from \\\"../interfaces/ISmartAccount.sol\\\";\\nimport {ISmartAccountController} from \\\"../interfaces/ISmartAccountController.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nerror AlreadyInitialized();\\nerror NotAuthorized();\\nerror InvalidInput();\\nerror OwnershipCycle();\\n\\n/**\\n * @title A smart contract account owned by a single ERC721 token\\n */\\nabstract contract SmartAccountBase is ISmartAccount, ERC165 {\\n  address internal _chargedParticles;\\n  address internal _executionController;\\n\\n  /// @dev mapping from owner => caller => has permissions\\n  mapping(address => mapping(address => bool)) internal _permissions;\\n\\n  bool internal _initialized;\\n  constructor() {}\\n\\n  function initialize(\\n    address chargedParticles,\\n    address executionController\\n  ) external {\\n    if (_initialized) { revert AlreadyInitialized(); }\\n    _initialized = true;\\n    _chargedParticles = chargedParticles;\\n    _executionController = executionController;\\n  }\\n\\n  /// @dev allows eth transfers by default, but allows account owner to override\\n  receive() external payable virtual override {}\\n\\n  function isInitialized() external view virtual override returns (bool) {\\n    return _initialized;\\n  }\\n\\n  function permissions(address _owner, address caller) public view virtual returns (bool) {\\n    return _permissions[_owner][caller];\\n  }\\n\\n  function getChargedParticles() public view virtual returns (address) {\\n    return _chargedParticles;\\n  }\\n\\n  function setChargedParticles(address chargedParticles) public virtual onlyOwner {\\n    if (chargedParticles == address(0)) { revert InvalidInput(); }\\n    _chargedParticles = chargedParticles;\\n  }\\n\\n  function getExecutionController() public view virtual returns (address) {\\n    return _executionController;\\n  }\\n\\n  function setExecutionController(address executionController) public virtual onlyOwner {\\n    _executionController = executionController;\\n    emit ExecutionControllerUpdated(msg.sender, executionController);\\n  }\\n\\n  /// @dev Returns the EIP-155 chain ID, token contract address, and token ID for the token that\\n  /// owns this account.\\n  function token()\\n    public\\n    view\\n    virtual\\n    returns (uint256, address, uint256)\\n  {\\n    return ERC6551AccountLib.token();\\n  }\\n\\n  /// @dev Returns the owner of the ERC-721 token which owns this account. By default, the owner\\n  /// of the token has full permissions on the account.\\n  function owner() public view virtual returns (address) {\\n    (uint256 chainId, address tokenContract, uint256 tokenId) = token();\\n    if (chainId != block.chainid) { return address(0); }\\n\\n    try IERC721(tokenContract).ownerOf(tokenId) returns (address _owner) {\\n      return _owner;\\n    } catch {\\n      return address(0);\\n    }\\n  }\\n\\n  function isValidSigner(address signer, bytes calldata) external view virtual returns (bytes4) {\\n    if (_isValidSigner(signer)) {\\n      return IERC6551Account.isValidSigner.selector;\\n    }\\n    return bytes4(0);\\n  }\\n\\n  /// @dev grants a given caller execution permissions\\n  function setPermissions(address[] calldata callers, bool[] calldata newPermissions) public virtual {\\n    address _owner = owner();\\n    if (msg.sender != _owner) { revert NotAuthorized(); }\\n\\n    uint256 length = callers.length;\\n    if (newPermissions.length != length) { revert InvalidInput(); }\\n\\n    for (uint256 i = 0; i < length; i++) {\\n      _permissions[_owner][callers[i]] = newPermissions[i];\\n      emit PermissionUpdated(_owner, callers[i], newPermissions[i]);\\n    }\\n  }\\n\\n  /// @dev Returns true if a given interfaceId is supported by this account. This method can be\\n  /// extended by an override.\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(IERC165, ERC165)\\n    returns (bool)\\n  {\\n    return interfaceId == type(IERC6551Account).interfaceId\\n      || interfaceId == type(IERC6551Executable).interfaceId\\n      || interfaceId == type(ISmartAccount).interfaceId\\n      || super.supportsInterface(interfaceId);\\n  }\\n\\n  /// @dev Allows ERC-721 tokens to be received so long as they do not cause an ownership cycle.\\n  /// This function can be overriden.\\n  function onERC721Received(\\n    address,\\n    address,\\n    uint256 receivedTokenId,\\n    bytes memory\\n  ) public view virtual override returns (bytes4) {\\n    (\\n      uint256 chainId,\\n      address tokenContract,\\n      uint256 tokenId\\n    ) = token();\\n\\n    if (chainId == block.chainid && tokenContract == msg.sender && tokenId == receivedTokenId) {\\n      revert OwnershipCycle();\\n    }\\n    return this.onERC721Received.selector;\\n  }\\n\\n  /// @dev Allows ERC-1155 tokens to be received. This function can be overriden.\\n  function onERC1155Received(\\n    address,\\n    address,\\n    uint256,\\n    uint256,\\n    bytes memory\\n  ) public pure virtual override returns (bytes4) {\\n    return this.onERC1155Received.selector;\\n  }\\n\\n  /// @dev Allows ERC-1155 token batches to be received. This function can be overriden.\\n  function onERC1155BatchReceived(\\n    address,\\n    address,\\n    uint256[] memory,\\n    uint256[] memory,\\n    bytes memory\\n  ) public pure virtual override returns (bytes4) {\\n    return this.onERC1155BatchReceived.selector;\\n  }\\n\\n  /// @dev Executes a low-level call\\n  function _call(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) internal returns (bytes memory result) {\\n    bool success;\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (success, result) = to.call{value: value}(data);\\n\\n    if (!success) {\\n      assembly {\\n        revert(add(result, 32), mload(result))\\n      }\\n    }\\n  }\\n\\n  function _onExecute(\\n    address to,\\n    uint256 value,\\n    bytes calldata data,\\n    uint8 operation\\n  ) internal {\\n    if (IERC165(_executionController).supportsInterface(type(ISmartAccountController).interfaceId)) {\\n      string memory revertReason = ISmartAccountController(_executionController).onExecute(to, value, data, operation);\\n      if (bytes(revertReason).length > 0) {\\n        revert(revertReason);\\n      }\\n    }\\n  }\\n\\n  function _onUpdateToken(\\n    bool isReceiving,\\n    address assetToken,\\n    uint256 assetAmount\\n  ) internal {\\n    if (IERC165(_executionController).supportsInterface(type(ISmartAccountController).interfaceId)) {\\n      (uint256 chainId, address tokenContract, uint256 tokenId) = token();\\n      ISmartAccountController(_executionController)\\n        .onUpdateToken(isReceiving, chainId, tokenContract, tokenId, assetToken, assetAmount);\\n    }\\n  }\\n\\n  function _onUpdateNFT(\\n    bool isReceiving,\\n    address childTokenContract,\\n    uint256 childTokenId,\\n    uint256 childTokenAmount\\n  ) internal {\\n    if (IERC165(_executionController).supportsInterface(type(ISmartAccountController).interfaceId)) {\\n      (uint256 chainId, address tokenContract, uint256 tokenId) = token();\\n      ISmartAccountController(_executionController)\\n        .onUpdateNFT(isReceiving, chainId, tokenContract, tokenId, childTokenContract, childTokenId, childTokenAmount);\\n    }\\n  }\\n\\n  function _onUpdateNFTBatch(\\n    bool isReceiving,\\n    address childTokenContract,\\n    uint256[] calldata childTokenIds,\\n    uint256[] calldata childTokenAmounts\\n  ) internal {\\n    if (IERC165(_executionController).supportsInterface(type(ISmartAccountController).interfaceId)) {\\n      (uint256 chainId, address tokenContract, uint256 tokenId) = token();\\n      ISmartAccountController(_executionController)\\n        .onUpdateNFTBatch(isReceiving, chainId, tokenContract, tokenId, childTokenContract, childTokenIds, childTokenAmounts);\\n    }\\n  }\\n\\n  function _isValidSigner(address signer) internal view virtual returns (bool) {\\n    address ownerOf = owner();\\n\\n    // Charged Particles & Execution Controller always have permissions\\n    if (signer == _chargedParticles) { return true; }\\n    if (signer == _executionController) { return true; }\\n\\n    // authorize caller if owner has granted permissions\\n    if (_permissions[ownerOf][signer]) { return true; }\\n\\n    // authorize token owner\\n    return signer == ownerOf;\\n  }\\n\\n  /// @dev reverts if caller is not the owner of the NFT which owns the account\\n  modifier onlyOwner() {\\n    if (msg.sender != owner()) { revert NotAuthorized(); }\\n    _;\\n  }\\n\\n  /// @dev reverts if caller is not authorized to execute on this account\\n  modifier onlyValidSigner() {\\n    if (!_isValidSigner(msg.sender)) { revert NotAuthorized(); }\\n    _;\\n  }\\n}\",\"keccak256\":\"0xc7006cac57240b9006c612dae4c6e466544aaadd98b9cdadbc371c48eeb64d1c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611c3e806100206000396000f3fe60806040526004361061014f5760003560e01c80637aaa3470116100b6578063ac087a6d1161006f578063ac087a6d146103d4578063ae4d1753146103f4578063bc197c8114610414578063c19d93fb14610440578063f23a6e6114610456578063fc0c546a1461048257600080fd5b80637aaa3470146103205780637abdd2d1146103415780637d167664146103615780638da5cb5b146103815780638f0e24b6146103965780639bf32a35146103b657600080fd5b8063392e53cd11610108578063392e53cd14610288578063485cc955146102a057806351945447146102c0578063523e3260146102e05780636e5559fd1461030057806379ee54f71461032057600080fd5b806301ffc9a71461015b578063039721b114610190578063150b7a02146101b257806317dd2c92146101df5780631c1801fa146102115780631f9838b51461023f57600080fd5b3661015657005b600080fd5b34801561016757600080fd5b5061017b6101763660046112c4565b6104ba565b60405190151581526020015b60405180910390f35b34801561019c57600080fd5b506101b06101ab366004611339565b610527565b005b3480156101be57600080fd5b506101d26101cd36600461147f565b6106cd565b60405161018791906114ea565b3480156101eb57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610187565b34801561021d57600080fd5b5061023161022c3660046114ff565b610735565b604051908152602001610187565b34801561024b57600080fd5b5061017b61025a36600461152b565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b34801561029457600080fd5b5060035460ff1661017b565b3480156102ac57600080fd5b506101b06102bb36600461152b565b610831565b6102d36102ce3660046115a5565b610890565b604051610187919061166e565b3480156102ec57600080fd5b506101d26102fb366004611681565b61094f565b34801561030c57600080fd5b506101b061031b3660046116d5565b610977565b34801561032c57600080fd5b5061023161033b3660046116d5565b50600090565b34801561034d57600080fd5b5061023161035c3660046116d5565b6109f9565b34801561036d57600080fd5b506101b061037c366004611700565b610a64565b34801561038d57600080fd5b506101f9610a9a565b3480156103a257600080fd5b506101b06103b1366004611741565b610b36565b3480156103c257600080fd5b506001546001600160a01b03166101f9565b3480156103e057600080fd5b506101b06103ef366004611787565b610b6e565b34801561040057600080fd5b506101b061040f3660046116d5565b610baa565b34801561042057600080fd5b506101d261042f36600461189a565b63bc197c8160e01b95945050505050565b34801561044c57600080fd5b5061023160045481565b34801561046257600080fd5b506101d2610471366004611947565b63f23a6e6160e01b95945050505050565b34801561048e57600080fd5b50610497610c3e565b604080519384526001600160a01b03909216602084015290820152606001610187565b60006001600160e01b03198216636faff5f160e01b14806104eb57506001600160e01b03198216635194544760e01b145b8061050657506001600160e01b03198216634a83018b60e01b145b8061052157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610531610a9a565b9050336001600160a01b0382161461055c5760405163ea8e4eb560e01b815260040160405180910390fd5b8382811461057d5760405163b4fa3fb360e01b815260040160405180910390fd5b60005b818110156106c45784848281811061059a5761059a6119af565b90506020020160208101906105af91906119c5565b6001600160a01b0384166000908152600260205260408120908989858181106105da576105da6119af565b90506020020160208101906105ef91906116d5565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790557f394777a58092892d136a90c4bb7e4350c72ac50fba6a0208128677f36527dcf58388888481811061064b5761064b6119af565b905060200201602081019061066091906116d5565b878785818110610672576106726119af565b905060200201602081019061068791906119c5565b604080516001600160a01b03948516815293909216602084015215159082015260600160405180910390a1806106bc816119e2565b915050610580565b50505050505050565b6000806000806106db610c3e565b92509250925046831480156106f857506001600160a01b03821633145b801561070357508581145b156107215760405163b79e3f3f60e01b815260040160405180910390fd5b50630a85bd0160e11b979650505050505050565b6000610749836001600160a01b0316610c56565b156107c257604051627eeac760e11b8152306004820152602481018390526001600160a01b0384169062fdd58e90604401602060405180830381865afa158015610797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bb9190611a09565b9050610521565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082a9190611a09565b9392505050565b60035460ff16156108545760405162dc149f60e41b815260040160405180910390fd5b60038054600160ff199091168117909155600080546001600160a01b03199081166001600160a01b039586161790915581541691909216179055565b606061089b33610ccd565b6108b85760405163ea8e4eb560e01b815260040160405180910390fd5b60ff8216156109195760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792063616c6c206f7065726174696f6e732061726520737570706f7274604482015261195960f21b60648201526084015b60405180910390fd5b600460008154610928906119e2565b909155506109398686868686610d6d565b61094586868686610e95565b9695505050505050565b600061095a84610ccd565b1561096d5750630291f19360e51b61082a565b5060009392505050565b61097f610a9a565b6001600160a01b0316336001600160a01b0316146109b05760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b0381166109d75760405163b4fa3fb360e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105219190611a09565b610a6d33610ccd565b610a8a5760405163ea8e4eb560e01b815260040160405180910390fd5b610a95838383610f11565b505050565b600080600080610aa8610c3e565b925092509250468314610abf576000935050505090565b6040516331a9108f60e11b8152600481018290526001600160a01b03831690636352211e90602401602060405180830381865afa925050508015610b20575060408051601f3d908101601f19168201909252610b1d91810190611a22565b60015b610b2e576000935050505090565b949350505050565b610b3f33610ccd565b610b5c5760405163ea8e4eb560e01b815260040160405180910390fd5b610b6884848484611031565b50505050565b610b7733610ccd565b610b945760405163ea8e4eb560e01b815260040160405180910390fd5b610ba2868686868686611157565b505050505050565b610bb2610a9a565b6001600160a01b0316336001600160a01b031614610be35760405163ea8e4eb560e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040805133815260208101929092527f8e49c81dbf3f64ca1e8afe0b105d6e6a159505016a63bf20d3e3f4324e7597c7910160405180910390a150565b6000806000610c4b611264565b925092509250909192565b6040516301ffc9a760e01b81526000906001600160a01b038316906301ffc9a790610c8c90636cdb3d1360e11b906004016114ea565b602060405180830381865afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105219190611a3f565b600080610cd8610a9a565b6000549091506001600160a01b0390811690841603610cfa5750600192915050565b6001546001600160a01b0390811690841603610d195750600192915050565b6001600160a01b0380821660009081526002602090815260408083209387168352929052205460ff1615610d505750600192915050565b806001600160a01b0316836001600160a01b031614915050919050565b6001546040516301ffc9a760e01b81526001600160a01b03909116906301ffc9a790610da490630736863160e31b906004016114ea565b602060405180830381865afa158015610dc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de59190611a3f565b15610e8e57600154604051631269c0cd60e21b81526000916001600160a01b0316906349a7033490610e239089908990899089908990600401611a5c565b6000604051808303816000875af1158015610e42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e6a9190810190611ab1565b805190915015610ba2578060405162461bcd60e51b8152600401610910919061166e565b5050505050565b60606000856001600160a01b0316858585604051610eb4929190611b27565b60006040518083038185875af1925050503d8060008114610ef1576040519150601f19603f3d011682016040523d82523d6000602084013e610ef6565b606091505b509250905080610f0857815160208301fd5b50949350505050565b6001546040516301ffc9a760e01b81526001600160a01b03909116906301ffc9a790610f4890630736863160e31b906004016114ea565b602060405180830381865afa158015610f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f899190611a3f565b15610a95576000806000610f9b610c3e565b6001546040516380ced4bf60e01b81528a15156004820152602481018590526001600160a01b038085166044830152606482018490528a8116608483015260a482018a905294975092955090935091909116906380ced4bf9060c401600060405180830381600087803b15801561101157600080fd5b505af1158015611025573d6000803e3d6000fd5b50505050505050505050565b6001546040516301ffc9a760e01b81526001600160a01b03909116906301ffc9a79061106890630736863160e31b906004016114ea565b602060405180830381865afa158015611085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a99190611a3f565b15610b685760008060006110bb610c3e565b60015460405162da771360e01b81528b15156004820152602481018590526001600160a01b038085166044830152606482018490528b8116608483015260a482018b905260c482018a9052949750929550909350919091169062da77139060e401600060405180830381600087803b15801561113657600080fd5b505af115801561114a573d6000803e3d6000fd5b5050505050505050505050565b6001546040516301ffc9a760e01b81526001600160a01b03909116906301ffc9a79061118e90630736863160e31b906004016114ea565b602060405180830381865afa1580156111ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cf9190611a3f565b15610ba25760008060006111e1610c3e565b600154604051630f00791160e41b815293965091945092506001600160a01b03169063f007911090611227908c908790879087908f908f908f908f908f90600401611b69565b600060405180830381600087803b15801561124157600080fd5b505af1158015611255573d6000803e3d6000fd5b50505050505050505050505050565b6040805160608082526080820190925260009182918291610c4b91309184918291829182916020820181803683370190505090506060604d60208301873c808060200190518101906112b69190611bcf565b935093509350509193909250565b6000602082840312156112d657600080fd5b81356001600160e01b03198116811461082a57600080fd5b60008083601f84011261130057600080fd5b5081356001600160401b0381111561131757600080fd5b6020830191508360208260051b850101111561133257600080fd5b9250929050565b6000806000806040858703121561134f57600080fd5b84356001600160401b038082111561136657600080fd5b611372888389016112ee565b9096509450602087013591508082111561138b57600080fd5b50611398878288016112ee565b95989497509550505050565b6001600160a01b03811681146113b957600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156113fa576113fa6113bc565b604052919050565b60006001600160401b0382111561141b5761141b6113bc565b50601f01601f191660200190565b600082601f83011261143a57600080fd5b813561144d61144882611402565b6113d2565b81815284602083860101111561146257600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561149557600080fd5b84356114a0816113a4565b935060208501356114b0816113a4565b92506040850135915060608501356001600160401b038111156114d257600080fd5b6114de87828801611429565b91505092959194509250565b6001600160e01b031991909116815260200190565b6000806040838503121561151257600080fd5b823561151d816113a4565b946020939093013593505050565b6000806040838503121561153e57600080fd5b8235611549816113a4565b91506020830135611559816113a4565b809150509250929050565b60008083601f84011261157657600080fd5b5081356001600160401b0381111561158d57600080fd5b60208301915083602082850101111561133257600080fd5b6000806000806000608086880312156115bd57600080fd5b85356115c8816113a4565b94506020860135935060408601356001600160401b038111156115ea57600080fd5b6115f688828901611564565b909450925050606086013560ff8116811461161057600080fd5b809150509295509295909350565b60005b83811015611639578181015183820152602001611621565b50506000910152565b6000815180845261165a81602086016020860161161e565b601f01601f19169290920160200192915050565b60208152600061082a6020830184611642565b60008060006040848603121561169657600080fd5b83356116a1816113a4565b925060208401356001600160401b038111156116bc57600080fd5b6116c886828701611564565b9497909650939450505050565b6000602082840312156116e757600080fd5b813561082a816113a4565b80151581146113b957600080fd5b60008060006060848603121561171557600080fd5b8335611720816116f2565b92506020840135611730816113a4565b929592945050506040919091013590565b6000806000806080858703121561175757600080fd5b8435611762816116f2565b93506020850135611772816113a4565b93969395505050506040820135916060013590565b600080600080600080608087890312156117a057600080fd5b86356117ab816116f2565b955060208701356117bb816113a4565b945060408701356001600160401b03808211156117d757600080fd5b6117e38a838b016112ee565b909650945060608901359150808211156117fc57600080fd5b5061180989828a016112ee565b979a9699509497509295939492505050565b600082601f83011261182c57600080fd5b813560206001600160401b03821115611847576118476113bc565b8160051b6118568282016113d2565b928352848101820192828101908785111561187057600080fd5b83870192505b8483101561188f57823582529183019190830190611876565b979650505050505050565b600080600080600060a086880312156118b257600080fd5b85356118bd816113a4565b945060208601356118cd816113a4565b935060408601356001600160401b03808211156118e957600080fd5b6118f589838a0161181b565b9450606088013591508082111561190b57600080fd5b61191789838a0161181b565b9350608088013591508082111561192d57600080fd5b5061193a88828901611429565b9150509295509295909350565b600080600080600060a0868803121561195f57600080fd5b853561196a816113a4565b9450602086013561197a816113a4565b9350604086013592506060860135915060808601356001600160401b038111156119a357600080fd5b61193a88828901611429565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156119d757600080fd5b813561082a816116f2565b600060018201611a0257634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215611a1b57600080fd5b5051919050565b600060208284031215611a3457600080fd5b815161082a816113a4565b600060208284031215611a5157600080fd5b815161082a816116f2565b6001600160a01b0386168152602081018590526080604082018190528101839052828460a0830137600060a08483010152600060a0601f19601f860116830101905060ff831660608301529695505050505050565b600060208284031215611ac357600080fd5b81516001600160401b03811115611ad957600080fd5b8201601f81018413611aea57600080fd5b8051611af861144882611402565b818152856020838501011115611b0d57600080fd5b611b1e82602083016020860161161e565b95945050505050565b8183823760009101908152919050565b81835260006001600160fb1b03831115611b5057600080fd5b8260051b80836020870137939093016020019392505050565b8915158152602081018990526001600160a01b038881166040830152606082018890528616608082015260e060a08201819052600090611bac9083018688611b37565b82810360c0840152611bbf818587611b37565b9c9b505050505050505050505050565b600080600060608486031215611be457600080fd5b835192506020840151611bf6816113a4565b8092505060408401519050925092509256fea2646970667358221220e02fb9559c80ec7c5dba647fc8947bef6e108da1df6b3b214be678998f3e064864736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061014f5760003560e01c80637aaa3470116100b6578063ac087a6d1161006f578063ac087a6d146103d4578063ae4d1753146103f4578063bc197c8114610414578063c19d93fb14610440578063f23a6e6114610456578063fc0c546a1461048257600080fd5b80637aaa3470146103205780637abdd2d1146103415780637d167664146103615780638da5cb5b146103815780638f0e24b6146103965780639bf32a35146103b657600080fd5b8063392e53cd11610108578063392e53cd14610288578063485cc955146102a057806351945447146102c0578063523e3260146102e05780636e5559fd1461030057806379ee54f71461032057600080fd5b806301ffc9a71461015b578063039721b114610190578063150b7a02146101b257806317dd2c92146101df5780631c1801fa146102115780631f9838b51461023f57600080fd5b3661015657005b600080fd5b34801561016757600080fd5b5061017b6101763660046112c4565b6104ba565b60405190151581526020015b60405180910390f35b34801561019c57600080fd5b506101b06101ab366004611339565b610527565b005b3480156101be57600080fd5b506101d26101cd36600461147f565b6106cd565b60405161018791906114ea565b3480156101eb57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610187565b34801561021d57600080fd5b5061023161022c3660046114ff565b610735565b604051908152602001610187565b34801561024b57600080fd5b5061017b61025a36600461152b565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b34801561029457600080fd5b5060035460ff1661017b565b3480156102ac57600080fd5b506101b06102bb36600461152b565b610831565b6102d36102ce3660046115a5565b610890565b604051610187919061166e565b3480156102ec57600080fd5b506101d26102fb366004611681565b61094f565b34801561030c57600080fd5b506101b061031b3660046116d5565b610977565b34801561032c57600080fd5b5061023161033b3660046116d5565b50600090565b34801561034d57600080fd5b5061023161035c3660046116d5565b6109f9565b34801561036d57600080fd5b506101b061037c366004611700565b610a64565b34801561038d57600080fd5b506101f9610a9a565b3480156103a257600080fd5b506101b06103b1366004611741565b610b36565b3480156103c257600080fd5b506001546001600160a01b03166101f9565b3480156103e057600080fd5b506101b06103ef366004611787565b610b6e565b34801561040057600080fd5b506101b061040f3660046116d5565b610baa565b34801561042057600080fd5b506101d261042f36600461189a565b63bc197c8160e01b95945050505050565b34801561044c57600080fd5b5061023160045481565b34801561046257600080fd5b506101d2610471366004611947565b63f23a6e6160e01b95945050505050565b34801561048e57600080fd5b50610497610c3e565b604080519384526001600160a01b03909216602084015290820152606001610187565b60006001600160e01b03198216636faff5f160e01b14806104eb57506001600160e01b03198216635194544760e01b145b8061050657506001600160e01b03198216634a83018b60e01b145b8061052157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610531610a9a565b9050336001600160a01b0382161461055c5760405163ea8e4eb560e01b815260040160405180910390fd5b8382811461057d5760405163b4fa3fb360e01b815260040160405180910390fd5b60005b818110156106c45784848281811061059a5761059a6119af565b90506020020160208101906105af91906119c5565b6001600160a01b0384166000908152600260205260408120908989858181106105da576105da6119af565b90506020020160208101906105ef91906116d5565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790557f394777a58092892d136a90c4bb7e4350c72ac50fba6a0208128677f36527dcf58388888481811061064b5761064b6119af565b905060200201602081019061066091906116d5565b878785818110610672576106726119af565b905060200201602081019061068791906119c5565b604080516001600160a01b03948516815293909216602084015215159082015260600160405180910390a1806106bc816119e2565b915050610580565b50505050505050565b6000806000806106db610c3e565b92509250925046831480156106f857506001600160a01b03821633145b801561070357508581145b156107215760405163b79e3f3f60e01b815260040160405180910390fd5b50630a85bd0160e11b979650505050505050565b6000610749836001600160a01b0316610c56565b156107c257604051627eeac760e11b8152306004820152602481018390526001600160a01b0384169062fdd58e90604401602060405180830381865afa158015610797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bb9190611a09565b9050610521565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082a9190611a09565b9392505050565b60035460ff16156108545760405162dc149f60e41b815260040160405180910390fd5b60038054600160ff199091168117909155600080546001600160a01b03199081166001600160a01b039586161790915581541691909216179055565b606061089b33610ccd565b6108b85760405163ea8e4eb560e01b815260040160405180910390fd5b60ff8216156109195760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792063616c6c206f7065726174696f6e732061726520737570706f7274604482015261195960f21b60648201526084015b60405180910390fd5b600460008154610928906119e2565b909155506109398686868686610d6d565b61094586868686610e95565b9695505050505050565b600061095a84610ccd565b1561096d5750630291f19360e51b61082a565b5060009392505050565b61097f610a9a565b6001600160a01b0316336001600160a01b0316146109b05760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b0381166109d75760405163b4fa3fb360e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105219190611a09565b610a6d33610ccd565b610a8a5760405163ea8e4eb560e01b815260040160405180910390fd5b610a95838383610f11565b505050565b600080600080610aa8610c3e565b925092509250468314610abf576000935050505090565b6040516331a9108f60e11b8152600481018290526001600160a01b03831690636352211e90602401602060405180830381865afa925050508015610b20575060408051601f3d908101601f19168201909252610b1d91810190611a22565b60015b610b2e576000935050505090565b949350505050565b610b3f33610ccd565b610b5c5760405163ea8e4eb560e01b815260040160405180910390fd5b610b6884848484611031565b50505050565b610b7733610ccd565b610b945760405163ea8e4eb560e01b815260040160405180910390fd5b610ba2868686868686611157565b505050505050565b610bb2610a9a565b6001600160a01b0316336001600160a01b031614610be35760405163ea8e4eb560e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040805133815260208101929092527f8e49c81dbf3f64ca1e8afe0b105d6e6a159505016a63bf20d3e3f4324e7597c7910160405180910390a150565b6000806000610c4b611264565b925092509250909192565b6040516301ffc9a760e01b81526000906001600160a01b038316906301ffc9a790610c8c90636cdb3d1360e11b906004016114ea565b602060405180830381865afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105219190611a3f565b600080610cd8610a9a565b6000549091506001600160a01b0390811690841603610cfa5750600192915050565b6001546001600160a01b0390811690841603610d195750600192915050565b6001600160a01b0380821660009081526002602090815260408083209387168352929052205460ff1615610d505750600192915050565b806001600160a01b0316836001600160a01b031614915050919050565b6001546040516301ffc9a760e01b81526001600160a01b03909116906301ffc9a790610da490630736863160e31b906004016114ea565b602060405180830381865afa158015610dc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de59190611a3f565b15610e8e57600154604051631269c0cd60e21b81526000916001600160a01b0316906349a7033490610e239089908990899089908990600401611a5c565b6000604051808303816000875af1158015610e42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e6a9190810190611ab1565b805190915015610ba2578060405162461bcd60e51b8152600401610910919061166e565b5050505050565b60606000856001600160a01b0316858585604051610eb4929190611b27565b60006040518083038185875af1925050503d8060008114610ef1576040519150601f19603f3d011682016040523d82523d6000602084013e610ef6565b606091505b509250905080610f0857815160208301fd5b50949350505050565b6001546040516301ffc9a760e01b81526001600160a01b03909116906301ffc9a790610f4890630736863160e31b906004016114ea565b602060405180830381865afa158015610f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f899190611a3f565b15610a95576000806000610f9b610c3e565b6001546040516380ced4bf60e01b81528a15156004820152602481018590526001600160a01b038085166044830152606482018490528a8116608483015260a482018a905294975092955090935091909116906380ced4bf9060c401600060405180830381600087803b15801561101157600080fd5b505af1158015611025573d6000803e3d6000fd5b50505050505050505050565b6001546040516301ffc9a760e01b81526001600160a01b03909116906301ffc9a79061106890630736863160e31b906004016114ea565b602060405180830381865afa158015611085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a99190611a3f565b15610b685760008060006110bb610c3e565b60015460405162da771360e01b81528b15156004820152602481018590526001600160a01b038085166044830152606482018490528b8116608483015260a482018b905260c482018a9052949750929550909350919091169062da77139060e401600060405180830381600087803b15801561113657600080fd5b505af115801561114a573d6000803e3d6000fd5b5050505050505050505050565b6001546040516301ffc9a760e01b81526001600160a01b03909116906301ffc9a79061118e90630736863160e31b906004016114ea565b602060405180830381865afa1580156111ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cf9190611a3f565b15610ba25760008060006111e1610c3e565b600154604051630f00791160e41b815293965091945092506001600160a01b03169063f007911090611227908c908790879087908f908f908f908f908f90600401611b69565b600060405180830381600087803b15801561124157600080fd5b505af1158015611255573d6000803e3d6000fd5b50505050505050505050505050565b6040805160608082526080820190925260009182918291610c4b91309184918291829182916020820181803683370190505090506060604d60208301873c808060200190518101906112b69190611bcf565b935093509350509193909250565b6000602082840312156112d657600080fd5b81356001600160e01b03198116811461082a57600080fd5b60008083601f84011261130057600080fd5b5081356001600160401b0381111561131757600080fd5b6020830191508360208260051b850101111561133257600080fd5b9250929050565b6000806000806040858703121561134f57600080fd5b84356001600160401b038082111561136657600080fd5b611372888389016112ee565b9096509450602087013591508082111561138b57600080fd5b50611398878288016112ee565b95989497509550505050565b6001600160a01b03811681146113b957600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156113fa576113fa6113bc565b604052919050565b60006001600160401b0382111561141b5761141b6113bc565b50601f01601f191660200190565b600082601f83011261143a57600080fd5b813561144d61144882611402565b6113d2565b81815284602083860101111561146257600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561149557600080fd5b84356114a0816113a4565b935060208501356114b0816113a4565b92506040850135915060608501356001600160401b038111156114d257600080fd5b6114de87828801611429565b91505092959194509250565b6001600160e01b031991909116815260200190565b6000806040838503121561151257600080fd5b823561151d816113a4565b946020939093013593505050565b6000806040838503121561153e57600080fd5b8235611549816113a4565b91506020830135611559816113a4565b809150509250929050565b60008083601f84011261157657600080fd5b5081356001600160401b0381111561158d57600080fd5b60208301915083602082850101111561133257600080fd5b6000806000806000608086880312156115bd57600080fd5b85356115c8816113a4565b94506020860135935060408601356001600160401b038111156115ea57600080fd5b6115f688828901611564565b909450925050606086013560ff8116811461161057600080fd5b809150509295509295909350565b60005b83811015611639578181015183820152602001611621565b50506000910152565b6000815180845261165a81602086016020860161161e565b601f01601f19169290920160200192915050565b60208152600061082a6020830184611642565b60008060006040848603121561169657600080fd5b83356116a1816113a4565b925060208401356001600160401b038111156116bc57600080fd5b6116c886828701611564565b9497909650939450505050565b6000602082840312156116e757600080fd5b813561082a816113a4565b80151581146113b957600080fd5b60008060006060848603121561171557600080fd5b8335611720816116f2565b92506020840135611730816113a4565b929592945050506040919091013590565b6000806000806080858703121561175757600080fd5b8435611762816116f2565b93506020850135611772816113a4565b93969395505050506040820135916060013590565b600080600080600080608087890312156117a057600080fd5b86356117ab816116f2565b955060208701356117bb816113a4565b945060408701356001600160401b03808211156117d757600080fd5b6117e38a838b016112ee565b909650945060608901359150808211156117fc57600080fd5b5061180989828a016112ee565b979a9699509497509295939492505050565b600082601f83011261182c57600080fd5b813560206001600160401b03821115611847576118476113bc565b8160051b6118568282016113d2565b928352848101820192828101908785111561187057600080fd5b83870192505b8483101561188f57823582529183019190830190611876565b979650505050505050565b600080600080600060a086880312156118b257600080fd5b85356118bd816113a4565b945060208601356118cd816113a4565b935060408601356001600160401b03808211156118e957600080fd5b6118f589838a0161181b565b9450606088013591508082111561190b57600080fd5b61191789838a0161181b565b9350608088013591508082111561192d57600080fd5b5061193a88828901611429565b9150509295509295909350565b600080600080600060a0868803121561195f57600080fd5b853561196a816113a4565b9450602086013561197a816113a4565b9350604086013592506060860135915060808601356001600160401b038111156119a357600080fd5b61193a88828901611429565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156119d757600080fd5b813561082a816116f2565b600060018201611a0257634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215611a1b57600080fd5b5051919050565b600060208284031215611a3457600080fd5b815161082a816113a4565b600060208284031215611a5157600080fd5b815161082a816116f2565b6001600160a01b0386168152602081018590526080604082018190528101839052828460a0830137600060a08483010152600060a0601f19601f860116830101905060ff831660608301529695505050505050565b600060208284031215611ac357600080fd5b81516001600160401b03811115611ad957600080fd5b8201601f81018413611aea57600080fd5b8051611af861144882611402565b818152856020838501011115611b0d57600080fd5b611b1e82602083016020860161161e565b95945050505050565b8183823760009101908152919050565b81835260006001600160fb1b03831115611b5057600080fd5b8260051b80836020870137939093016020019392505050565b8915158152602081018990526001600160a01b038881166040830152606082018890528616608082015260e060a08201819052600090611bac9083018688611b37565b82810360c0840152611bbf818587611b37565b9c9b505050505050505050505050565b600080600060608486031215611be457600080fd5b835192506020840151611bf6816113a4565b8092505060408401519050925092509256fea2646970667358221220e02fb9559c80ec7c5dba647fc8947bef6e108da1df6b3b214be678998f3e064864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "execute(address,uint256,bytes,uint8)": {
        "details": "executes a low-level call against an account if the caller is authorized to make calls"
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "Allows ERC-1155 token batches to be received. This function can be overriden."
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Allows ERC-1155 tokens to be received. This function can be overriden."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Allows ERC-721 tokens to be received so long as they do not cause an ownership cycle. This function can be overriden."
      },
      "owner()": {
        "details": "Returns the owner of the ERC-721 token which owns this account. By default, the owner of the token has full permissions on the account."
      },
      "setPermissions(address[],bool[])": {
        "details": "grants a given caller execution permissions"
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if a given interfaceId is supported by this account. This method can be extended by an override."
      },
      "token()": {
        "details": "Returns the EIP-155 chain ID, token contract address, and token ID for the token that owns this account."
      }
    },
    "stateVariables": {
      "state": {
        "details": "Returns a value that SHOULD be modified each time the account changes state.",
        "return": "The current account state",
        "returns": {
          "_0": "The current account state"
        }
      }
    },
    "title": "A smart contract account owned by a single ERC721 token",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9047,
        "contract": "contracts/SmartAccount.sol:SmartAccount",
        "label": "_chargedParticles",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9049,
        "contract": "contracts/SmartAccount.sol:SmartAccount",
        "label": "_executionController",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9056,
        "contract": "contracts/SmartAccount.sol:SmartAccount",
        "label": "_permissions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 9058,
        "contract": "contracts/SmartAccount.sol:SmartAccount",
        "label": "_initialized",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 6178,
        "contract": "contracts/SmartAccount.sol:SmartAccount",
        "label": "state",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}