{
  "address": "0x72E53f7b10167ae25287167F566d9912cd4d0489",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "methodSignature",
          "type": "bytes4"
        }
      ],
      "name": "bannedMethods",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "isAllowedMethod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "onExecute",
      "outputs": [
        {
          "internalType": "string",
          "name": "revertReason",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isReceiving",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receivedTokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "receivedTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "onUpdateNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isReceiving",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receivedTokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "receivedTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "name": "onUpdateNFTBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isReceiving",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receivedAssetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "receivedAssetAmount",
          "type": "uint256"
        }
      ],
      "name": "onUpdateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "methodSignature",
          "type": "bytes4"
        },
        {
          "internalType": "bool",
          "name": "isBanned",
          "type": "bool"
        }
      ],
      "name": "setBannedMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f951b05154e354ac53e3d53722df0ea936cc0e94b1fbd61d2f6f26a6438740f",
  "receipt": {
    "to": null,
    "from": "0x2BB8CBAd36D52708a43DE36a9Aa2782fFa0470F1",
    "contractAddress": "0x72E53f7b10167ae25287167F566d9912cd4d0489",
    "transactionIndex": 1,
    "gasUsed": "541204",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000020100000000000000020000000000000001000800000000000000000000000000000000400000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000001000000000020000000000000",
    "blockHash": "0xbffaa4ef9560fb95591523d32522ee445d131330f64cc0a91f8505d6baa30373",
    "transactionHash": "0x2f951b05154e354ac53e3d53722df0ea936cc0e94b1fbd61d2f6f26a6438740f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 16292010,
        "transactionHash": "0x2f951b05154e354ac53e3d53722df0ea936cc0e94b1fbd61d2f6f26a6438740f",
        "address": "0x72E53f7b10167ae25287167F566d9912cd4d0489",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bb8cbad36d52708a43de36a9aa2782ffa0470f1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbffaa4ef9560fb95591523d32522ee445d131330f64cc0a91f8505d6baa30373"
      }
    ],
    "blockNumber": 16292010,
    "cumulativeGasUsed": "585067",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bea157668a848c283a80316c80ff022e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"methodSignature\",\"type\":\"bytes4\"}],\"name\":\"bannedMethods\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"isAllowedMethod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"onExecute\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"revertReason\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isReceiving\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receivedTokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receivedTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onUpdateNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isReceiving\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receivedTokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"receivedTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"onUpdateNFTBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isReceiving\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receivedAssetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receivedAssetAmount\",\"type\":\"uint256\"}],\"name\":\"onUpdateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"methodSignature\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"isBanned\",\"type\":\"bool\"}],\"name\":\"setBannedMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if a given interfaceId is supported by this account. This method can be extended by an override.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_bannedMethods\":{\"details\":\"mapping from method signature => banned method call\"}},\"title\":\"A SmartAccount Controller which only allows specific methods to be executed on the associated SmartAccount\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/controllers/SmartAccountController_Example1.sol\":\"SmartAccountController_Example1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/controllers/SmartAccountController_Example1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {IERC165, ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ISmartAccountController} from \\\"../interfaces/ISmartAccountController.sol\\\";\\n\\n/**\\n * @title A SmartAccount Controller which only allows specific methods to be executed on the associated SmartAccount\\n */\\ncontract SmartAccountController_Example1 is ISmartAccountController, Ownable, ERC165 {\\n\\n  /// @dev mapping from method signature => banned method call\\n  mapping(bytes4 => bool) internal _bannedMethods;\\n\\n\\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n  // Initialization\\n  constructor() Ownable() {}\\n\\n\\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n  // Banned Methods Logic\\n\\n  function bannedMethods(bytes4 methodSignature) external view virtual returns (bool) {\\n    return _bannedMethods[methodSignature];\\n  }\\n\\n  function isAllowedMethod(bytes calldata data) external view virtual returns (bool) {\\n    return _isAllowedMethod(data);\\n  }\\n\\n  function setBannedMethod(bytes4 methodSignature, bool isBanned) external virtual onlyOwner {\\n    _bannedMethods[methodSignature] = isBanned;\\n  }\\n\\n  function _isAllowedMethod(bytes calldata _data) internal view returns (bool) {\\n    bytes4 signature = bytes4(_data[:4]);\\n    return !_bannedMethods[signature];\\n  }\\n\\n\\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n  // SmartAccount Controller Logic\\n\\n  function onExecute(\\n    address,\\n    uint256,\\n    bytes calldata data,\\n    uint8\\n  ) external virtual override returns (string memory revertReason) {\\n    if (!_isAllowedMethod(data)) {\\n      revertReason = \\\"Method call not allowed\\\";\\n    }\\n    // else success\\n  }\\n\\n  function onUpdateToken(\\n    bool isReceiving,\\n    uint256 chainId,\\n    address tokenContract,\\n    uint256 tokenId,\\n    address receivedAssetToken,\\n    uint256 receivedAssetAmount\\n  )\\n    external\\n    virtual\\n    override\\n  {\\n    // perform conditional logic here..\\n  }\\n\\n  function onUpdateNFT(\\n    bool isReceiving,\\n    uint256 chainId,\\n    address tokenContract,\\n    uint256 tokenId,\\n    address receivedTokenContract,\\n    uint256 receivedTokenId,\\n    uint256\\n  )\\n    external\\n    virtual\\n    override\\n  {\\n    // perform conditional logic here..\\n  }\\n\\n  function onUpdateNFTBatch(\\n    bool isReceiving,\\n    uint256 chainId,\\n    address tokenContract,\\n    uint256 tokenId,\\n    address receivedTokenContract,\\n    uint256[] calldata receivedTokenIds,\\n    uint256[] calldata\\n  )\\n    external\\n    virtual\\n    override\\n  {\\n    // perform conditional logic here..\\n  }\\n\\n\\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n  // Interface Identification\\n\\n  /// @dev Returns true if a given interfaceId is supported by this account. This method can be\\n  /// extended by an override.\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(IERC165, ERC165)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(ISmartAccountController).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0x9eed007bf276728a4444f304aa28bc42bb4fa995f52c551c901a455d86afd6b9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISmartAccountController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title\\n */\\ninterface ISmartAccountController is IERC165 {\\n  function onExecute(\\n    address to,\\n    uint256 value,\\n    bytes calldata data,\\n    uint8 operation\\n  ) external returns (string memory revertReason);\\n\\n  function onUpdateToken(\\n    bool isReceiving,\\n    uint256 chainId,\\n    address tokenContract,\\n    uint256 tokenId,\\n    address receivedAssetToken,\\n    uint256 receivedAssetAmount\\n  ) external;\\n\\n  function onUpdateNFT(\\n    bool isReceiving,\\n    uint256 chainId,\\n    address tokenContract,\\n    uint256 tokenId,\\n    address receivedTokenContract,\\n    uint256 receivedTokenId,\\n    uint256 receivedTokenAmount\\n  ) external;\\n\\n  function onUpdateNFTBatch(\\n    bool isReceiving,\\n    uint256 chainId,\\n    address tokenContract,\\n    uint256 tokenId,\\n    address receivedTokenContract,\\n    uint256[] calldata receivedTokenIds,\\n    uint256[] calldata receivedTokenAmounts\\n  ) external;\\n}\\n\",\"keccak256\":\"0x5e88c28a39826906d5490c52fc767d7f3e3a6536b13e9949f7d689f378213001\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6108608061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c806380ced4bf1161007157806380ced4bf146101295780638da5cb5b1461013f578063c6ab098f1461015a578063ed64b4ea1461016d578063f00791101461019a578063f2fde38b146101b357600080fd5b8062da7713146100ad57806301ffc9a7146100c657806349a70334146100ee57806358f202bb1461010e578063715018a614610121575b600080fd5b6100c46100bb366004610439565b50505050505050565b005b6100d96100d43660046104bb565b6101c6565b60405190151581526020015b60405180910390f35b6101016100fc36600461051f565b6101fd565b6040516100e59190610597565b6100c461011c3660046105e5565b61024c565b6100c4610280565b6100c4610137366004610618565b505050505050565b6000546040516001600160a01b0390911681526020016100e5565b6100d9610168366004610677565b610294565b6100d961017b3660046104bb565b6001600160e01b03191660009081526001602052604090205460ff1690565b6100c46101a83660046106fe565b505050505050505050565b6100c46101c13660046107b5565b6102a7565b60006001600160e01b03198216630736863160e31b14806101f757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606102098484610325565b610243575060408051808201909152601781527f4d6574686f642063616c6c206e6f7420616c6c6f77656400000000000000000060208201525b95945050505050565b610254610363565b6001600160e01b0319919091166000908152600160205260409020805460ff1916911515919091179055565b610288610363565b61029260006103bd565b565b60006102a08383610325565b9392505050565b6102af610363565b6001600160a01b0381166103195760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610322816103bd565b50565b60008061033560048285876107d0565b61033e916107fa565b6001600160e01b03191660009081526001602052604090205460ff1615949350505050565b6000546001600160a01b031633146102925760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610310565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8035801515811461041d57600080fd5b919050565b80356001600160a01b038116811461041d57600080fd5b600080600080600080600060e0888a03121561045457600080fd5b61045d8861040d565b96506020880135955061047260408901610422565b94506060880135935061048760808901610422565b925060a0880135915060c0880135905092959891949750929550565b80356001600160e01b03198116811461041d57600080fd5b6000602082840312156104cd57600080fd5b6102a0826104a3565b60008083601f8401126104e857600080fd5b50813567ffffffffffffffff81111561050057600080fd5b60208301915083602082850101111561051857600080fd5b9250929050565b60008060008060006080868803121561053757600080fd5b61054086610422565b945060208601359350604086013567ffffffffffffffff81111561056357600080fd5b61056f888289016104d6565b909450925050606086013560ff8116811461058957600080fd5b809150509295509295909350565b600060208083528351808285015260005b818110156105c4578581018301518582016040015282016105a8565b506000604082860101526040601f19601f8301168501019250505092915050565b600080604083850312156105f857600080fd5b610601836104a3565b915061060f6020840161040d565b90509250929050565b60008060008060008060c0878903121561063157600080fd5b61063a8761040d565b95506020870135945061064f60408801610422565b93506060870135925061066460808801610422565b915060a087013590509295509295509295565b6000806020838503121561068a57600080fd5b823567ffffffffffffffff8111156106a157600080fd5b6106ad858286016104d6565b90969095509350505050565b60008083601f8401126106cb57600080fd5b50813567ffffffffffffffff8111156106e357600080fd5b6020830191508360208260051b850101111561051857600080fd5b600080600080600080600080600060e08a8c03121561071c57600080fd5b6107258a61040d565b985060208a0135975061073a60408b01610422565b965060608a0135955061074f60808b01610422565b945060a08a013567ffffffffffffffff8082111561076c57600080fd5b6107788d838e016106b9565b909650945060c08c013591508082111561079157600080fd5b5061079e8c828d016106b9565b915080935050809150509295985092959850929598565b6000602082840312156107c757600080fd5b6102a082610422565b600080858511156107e057600080fd5b838611156107ed57600080fd5b5050820193919092039150565b6001600160e01b031981358181169160048510156108225780818660040360031b1b83161692505b50509291505056fea2646970667358221220c077c93d82b22f98509c28b0677f6c52b60d9d990ecfd5b3909fe3faf0d6769d64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a85760003560e01c806380ced4bf1161007157806380ced4bf146101295780638da5cb5b1461013f578063c6ab098f1461015a578063ed64b4ea1461016d578063f00791101461019a578063f2fde38b146101b357600080fd5b8062da7713146100ad57806301ffc9a7146100c657806349a70334146100ee57806358f202bb1461010e578063715018a614610121575b600080fd5b6100c46100bb366004610439565b50505050505050565b005b6100d96100d43660046104bb565b6101c6565b60405190151581526020015b60405180910390f35b6101016100fc36600461051f565b6101fd565b6040516100e59190610597565b6100c461011c3660046105e5565b61024c565b6100c4610280565b6100c4610137366004610618565b505050505050565b6000546040516001600160a01b0390911681526020016100e5565b6100d9610168366004610677565b610294565b6100d961017b3660046104bb565b6001600160e01b03191660009081526001602052604090205460ff1690565b6100c46101a83660046106fe565b505050505050505050565b6100c46101c13660046107b5565b6102a7565b60006001600160e01b03198216630736863160e31b14806101f757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606102098484610325565b610243575060408051808201909152601781527f4d6574686f642063616c6c206e6f7420616c6c6f77656400000000000000000060208201525b95945050505050565b610254610363565b6001600160e01b0319919091166000908152600160205260409020805460ff1916911515919091179055565b610288610363565b61029260006103bd565b565b60006102a08383610325565b9392505050565b6102af610363565b6001600160a01b0381166103195760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610322816103bd565b50565b60008061033560048285876107d0565b61033e916107fa565b6001600160e01b03191660009081526001602052604090205460ff1615949350505050565b6000546001600160a01b031633146102925760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610310565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8035801515811461041d57600080fd5b919050565b80356001600160a01b038116811461041d57600080fd5b600080600080600080600060e0888a03121561045457600080fd5b61045d8861040d565b96506020880135955061047260408901610422565b94506060880135935061048760808901610422565b925060a0880135915060c0880135905092959891949750929550565b80356001600160e01b03198116811461041d57600080fd5b6000602082840312156104cd57600080fd5b6102a0826104a3565b60008083601f8401126104e857600080fd5b50813567ffffffffffffffff81111561050057600080fd5b60208301915083602082850101111561051857600080fd5b9250929050565b60008060008060006080868803121561053757600080fd5b61054086610422565b945060208601359350604086013567ffffffffffffffff81111561056357600080fd5b61056f888289016104d6565b909450925050606086013560ff8116811461058957600080fd5b809150509295509295909350565b600060208083528351808285015260005b818110156105c4578581018301518582016040015282016105a8565b506000604082860101526040601f19601f8301168501019250505092915050565b600080604083850312156105f857600080fd5b610601836104a3565b915061060f6020840161040d565b90509250929050565b60008060008060008060c0878903121561063157600080fd5b61063a8761040d565b95506020870135945061064f60408801610422565b93506060870135925061066460808801610422565b915060a087013590509295509295509295565b6000806020838503121561068a57600080fd5b823567ffffffffffffffff8111156106a157600080fd5b6106ad858286016104d6565b90969095509350505050565b60008083601f8401126106cb57600080fd5b50813567ffffffffffffffff8111156106e357600080fd5b6020830191508360208260051b850101111561051857600080fd5b600080600080600080600080600060e08a8c03121561071c57600080fd5b6107258a61040d565b985060208a0135975061073a60408b01610422565b965060608a0135955061074f60808b01610422565b945060a08a013567ffffffffffffffff8082111561076c57600080fd5b6107788d838e016106b9565b909650945060c08c013591508082111561079157600080fd5b5061079e8c828d016106b9565b915080935050809150509295985092959850929598565b6000602082840312156107c757600080fd5b6102a082610422565b600080858511156107e057600080fd5b838611156107ed57600080fd5b5050820193919092039150565b6001600160e01b031981358181169160048510156108225780818660040360031b1b83161692505b50509291505056fea2646970667358221220c077c93d82b22f98509c28b0677f6c52b60d9d990ecfd5b3909fe3faf0d6769d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if a given interfaceId is supported by this account. This method can be extended by an override."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_bannedMethods": {
        "details": "mapping from method signature => banned method call"
      }
    },
    "title": "A SmartAccount Controller which only allows specific methods to be executed on the associated SmartAccount",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/controllers/SmartAccountController_Example1.sol:SmartAccountController_Example1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6403,
        "contract": "contracts/controllers/SmartAccountController_Example1.sol:SmartAccountController_Example1",
        "label": "_bannedMethods",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes4,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}