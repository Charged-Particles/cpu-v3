{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "acc-erc20/contracts/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Inspired on token.sol from DappHub\n\npragma solidity  ^0.8.0;\nimport \"./IERC20.sol\";\n\ncontract ERC20 is IERC20 {\n    uint256                                           internal  _totalSupply;\n    mapping (address => uint256)                      internal  _balanceOf;\n    mapping (address => mapping (address => uint256)) internal  _allowance;\n    string                                            public    symbol;\n    uint256                                           public    decimals = 18; // standard token precision. override to customize\n    string                                            public    name = \"\";     // Optional token name\n\n    constructor(string memory name_, string memory symbol_) {\n        name = name_;\n        symbol = symbol_;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address guy) public view virtual override returns (uint256) {\n        return _balanceOf[guy];\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function approve(address spender, uint wad) public virtual override returns (bool) {\n        return _approve(msg.sender, spender, wad);\n    }\n\n    function transfer(address dst, uint wad) public virtual override returns (bool) {\n        return _transfer(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad) public virtual override returns (bool) {\n        uint256 allowed = _allowance[src][msg.sender];\n        if (src != msg.sender && allowed != type(uint).max) {\n            require(allowed >= wad, \"ERC20: Insufficient approval\");\n            _approve(src, msg.sender, allowed - wad);\n        }\n\n        return _transfer(src, dst, wad);\n    }\n\n    function _transfer(address src, address dst, uint wad) internal virtual returns (bool) {\n        require(_balanceOf[src] >= wad, \"ERC20: Insufficient balance\");\n        _balanceOf[src] = _balanceOf[src] - wad;\n        _balanceOf[dst] = _balanceOf[dst] + wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint wad) internal virtual returns (bool) {\n        _allowance[owner][spender] = wad;\n        emit Approval(owner, spender, wad);\n        return true;\n    }\n\n    function _mint(address dst, uint wad) internal virtual {\n        _balanceOf[dst] = _balanceOf[dst] + wad;\n        _totalSupply = _totalSupply + wad;\n        emit Transfer(address(0), dst, wad);\n    }\n\n    function _burn(address src, uint wad) internal virtual {\n        require(_balanceOf[src] >= wad, \"ERC20: Insufficient balance\");\n        _balanceOf[src] = _balanceOf[src] - wad;\n        _totalSupply = _totalSupply - wad;\n        emit Transfer(src, address(0), wad);\n    }\n}"
    },
    "acc-erc20/contracts/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/ChargedParticles.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// ChargedParticles.sol -- Part of the Charged Particles Protocol\n// Copyright (c) 2024 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity ^0.8.13;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport {IERC2612} from \"erc20permit/contracts/IERC2612.sol\";\nimport {ERC20Permit} from \"erc20permit/contracts/ERC20Permit.sol\";\n\nimport {IERC6551Executable} from \"./interfaces/IERC6551Executable.sol\";\nimport {IERC6551Registry} from \"./interfaces/IERC6551Registry.sol\";\nimport {IChargedParticles} from \"./interfaces/IChargedParticles.sol\";\nimport {NftTokenInfo} from \"./lib/NftTokenInfo.sol\";\nimport {ISmartAccount} from \"./interfaces/ISmartAccount.sol\";\nimport {ISmartAccountController} from \"./interfaces/ISmartAccountController.sol\";\nimport {IDynamicTraits} from \"./interfaces/IDynamicTraits.sol\";\nimport {SmartAccountTimelocks} from \"./extensions/SmartAccountTimelocks.sol\";\n\n// Mode SFS (Fee Sharing)\ninterface ISFS {\n    function register(address _recipient) external returns (uint256 tokenId);\n}\n\n\ncontract ChargedParticles is IChargedParticles, Ownable, ReentrancyGuard {\n  using NftTokenInfo for address;\n  using SafeERC20 for IERC20;\n\n  // NFT contract => Execution Controller\n  mapping (address => address) internal executionControllers;\n  address internal defaultExecutionController;\n\n    // NFT contract => SmartAccount Implementation\n  mapping (address => address) internal accountImplementations;\n  address internal defaultAccountImplementation;\n\n  // Registry Version => Registry Address\n  mapping (uint256 => address) internal erc6551registry;\n  uint256 internal defaultRegistry;\n\n  // Default Salt for \"create2\"\n  bytes32 internal defaultSalt;\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // Initialization\n\n  constructor(\n    address registry,\n    address implementation,\n    address sfsRegistry\n  )\n    Ownable()\n    ReentrancyGuard()\n  {\n    erc6551registry[defaultRegistry] = registry;\n    defaultAccountImplementation = implementation;\n    defaultSalt = bytes32('CPU-V3');\n\n    // Mode SFS Registry\n    ISFS sfsContract = ISFS(sfsRegistry);\n    sfsContract.register(msg.sender); // Registers this contract and assigns the NFT to the deployer of this contract\n  }\n\n  function getSmartAccountAddress(address contractAddress, uint256 tokenId) external view override virtual returns (address) {\n    (address account, ) = _findAccount(contractAddress, tokenId);\n    return account;\n  }\n\n\n  /// @notice Gets the Amount of Asset Tokens that have been Deposited into the Particle\n  /// representing the Mass of the Particle.\n  /// @param contractAddress      The Address to the Contract of the Token\n  /// @param tokenId              The ID of the Token\n  /// @param assetToken           The Address of the Asset Token to check\n  /// @return total               The Amount of underlying Assets held within the Token\n  function baseParticleMass(\n    address contractAddress,\n    uint256 tokenId,\n    address assetToken\n  )\n    external\n    view\n    virtual\n    override\n    returns (uint256 total)\n  {\n    // Find the SmartAccount for this NFT\n    (address account, bool isSmartAccount) = _findAccount(contractAddress, tokenId);\n    if (isSmartAccount) {\n      ISmartAccount smartAccount = ISmartAccount(payable(account));\n      total = smartAccount.getPrincipal(assetToken);\n    }\n  }\n\n  /// @notice Gets the amount of Interest that the Particle has generated representing\n  /// the Charge of the Particle\n  /// @param contractAddress      The Address to the Contract of the Token\n  /// @param tokenId              The ID of the Token\n  /// @param assetToken           The Address of the Asset Token to check\n  /// @return total               The amount of interest the Token has generated (in Asset Token)\n  function currentParticleCharge(\n    address contractAddress,\n    uint256 tokenId,\n    address assetToken\n  )\n    external\n    view\n    virtual\n    override\n    returns (uint256 total)\n  {\n    // Find the SmartAccount for this NFT\n    (address account, bool isSmartAccount) = _findAccount(contractAddress, tokenId);\n    if (isSmartAccount) {\n      ISmartAccount smartAccount = ISmartAccount(payable(account));\n      total = smartAccount.getInterest(assetToken);\n    }\n  }\n\n  function currentParticleKinetics(\n    address contractAddress,\n    uint256 tokenId,\n    address assetToken\n  )\n    external\n    view\n    virtual\n    override\n    returns (uint256 total)\n  {\n    // Find the SmartAccount for this NFT\n    (address account, bool isSmartAccount) = _findAccount(contractAddress, tokenId);\n    if (isSmartAccount) {\n      ISmartAccount smartAccount = ISmartAccount(payable(account));\n      total = smartAccount.getRewards(assetToken);\n    }\n  }\n\n  /// @notice Gets the total amount of ERC721 Tokens that the Particle holds\n  /// @param contractAddress  The Address to the Contract of the Token\n  /// @param tokenId          The ID of the Token (for ERC1155)\n  /// @return total           The total amount of ERC721 tokens that are held within the Particle\n  function currentParticleCovalentBonds(\n    address contractAddress,\n    uint256 tokenId,\n    address nftContractAddress,\n    uint256 nftTokenId\n  )\n    external\n    view\n    virtual\n    override\n    returns (uint256 total)\n  {\n    // Find the SmartAccount for this NFT\n    (address account, bool isSmartAccount) = _findAccount(contractAddress, tokenId);\n    if (isSmartAccount) {\n      ISmartAccount smartAccount = ISmartAccount(payable(account));\n      total = smartAccount.getCovalentBonds(nftContractAddress, nftTokenId);\n    }\n  }\n\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // Energize (Deposit)\n\n  /// @notice Fund Particle with Asset Token\n  ///    Must be called by the account providing the Asset\n  ///    Account must Approve THIS contract as Operator of Asset\n  ///    Emits \"ERC6551AccountCreated\" event when a new wallet is created\n  ///\n  /// @param contractAddress      The Address to the Contract of the Token to Energize\n  /// @param tokenId              The ID of the Token to Energize\n  /// @param assetToken           The Address of the Asset Token being used\n  /// @param assetAmount          The Amount of Asset Token to Energize the Token with\n  /// @return account             The address of the SmartAccount associated with the NFT\n  function energizeParticle(\n    address contractAddress,\n    uint256 tokenId,\n    address assetToken,\n    uint256 assetAmount\n  )\n    external\n    virtual\n    override\n    nonReentrant\n    returns (address account)\n  {\n    // Find the SmartAccount for this NFT\n    (address accountAddress, bool isSmartAccount) = _createAccount(contractAddress, tokenId);\n    account = accountAddress;\n    ISmartAccount smartAccount = ISmartAccount(payable(account));\n\n    // Transfer to SmartAccount\n    IERC20(assetToken).safeTransferFrom(msg.sender, account, assetAmount);\n\n    // Pre-approve Charged Particles to transfer back out\n    IERC6551Executable(account).execute(assetToken, 0, abi.encodeWithSelector(IERC20.approve.selector, address(this), type(uint256).max), 0);\n\n    // Call \"update\" on SmartAccount\n    if (isSmartAccount) {\n      smartAccount.handleTokenUpdate(true, assetToken, assetAmount);\n    }\n  }\n\n  /// @notice Fund Particle with Asset Token\n  ///    Must be called by the account providing the Asset\n  ///    Account must Approve THIS contract as Operator of Asset\n  ///    Emits \"ERC6551AccountCreated\" event when a new wallet is created\n  ///\n  /// @param contractAddress      The Address to the Contract of the Token to Energize\n  /// @param tokenId              The ID of the Token to Energize\n  /// @param assetToken           The Address of the Asset Token being used\n  /// @param assetAmount          The Amount of Asset Token to Energize the Token with\n  /// @return account             The address of the SmartAccount associated with the NFT\n  function energizeParticleWithPermit(\n    address contractAddress,\n    uint256 tokenId,\n    address assetToken,\n    uint256 assetAmount,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  )\n    external\n    virtual\n    override\n    nonReentrant\n    returns (address account)\n  {\n    require(IERC165(assetToken).supportsInterface(type(IERC2612).interfaceId), \"permit not supported\");\n\n    // Find the SmartAccount for this NFT\n    (address accountAddress, bool isSmartAccount) = _createAccount(contractAddress, tokenId);\n    account = accountAddress;\n    ISmartAccount smartAccount = ISmartAccount(payable(account));\n\n    // Transfer to SmartAccount with Permission\n    ERC20Permit(assetToken).permit(msg.sender, address(this), assetAmount, deadline, v, r, s);\n    IERC20(assetToken).safeTransferFrom(msg.sender, account, assetAmount);\n\n    // Pre-approve Charged Particles to transfer back out\n    IERC6551Executable(account).execute(assetToken, 0, abi.encodeWithSelector(IERC20.approve.selector, address(this), type(uint256).max), 0);\n\n    // Call \"update\" on SmartAccount\n    if (isSmartAccount) {\n      smartAccount.handleTokenUpdate(true, assetToken, assetAmount);\n    }\n  }\n\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // Release (Withdraw)\n\n  function releaseParticle(\n    address receiver,\n    address contractAddress,\n    uint256 tokenId,\n    address assetToken\n  )\n    external\n    virtual\n    override\n    onlyNFTOwnerOrOperator(contractAddress, tokenId)\n    nonReentrant\n    returns (uint256 amount)\n  {\n    // Find the SmartAccount for this NFT\n    (address account, bool isSmartAccount) = _findAccount(contractAddress, tokenId);\n\n    // Transfer to Receiver\n    amount = IERC20(assetToken).balanceOf(account);\n    IERC20(assetToken).safeTransferFrom(account, receiver, amount);\n\n    // Call \"update\" on SmartAccount\n    if (isSmartAccount) {\n      ISmartAccount(payable(account)).handleTokenUpdate(false, assetToken, amount);\n    }\n  }\n\n  function releaseParticleAmount(\n    address receiver,\n    address contractAddress,\n    uint256 tokenId,\n    address assetToken,\n    uint256 assetAmount\n  )\n    external\n    virtual\n    override\n    onlyNFTOwnerOrOperator(contractAddress, tokenId)\n    nonReentrant\n    returns (uint256)\n  {\n    // Find the SmartAccount for this NFT\n    (address account, bool isSmartAccount) = _findAccount(contractAddress, tokenId);\n\n    // Transfer to Receiver\n    IERC20(assetToken).safeTransferFrom(account, receiver, assetAmount);\n\n    // Call \"update\" on SmartAccount\n    if (isSmartAccount) {\n      ISmartAccount(payable(account)).handleTokenUpdate(false, assetToken, assetAmount);\n    }\n\n    return assetAmount;\n  }\n\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // Covalent Bonds (Nested NFTs)\n\n  /// @notice Deposit other NFT Assets into the Particle\n  ///    Must be called by the account providing the Asset\n  ///    Account must Approve THIS contract as Operator of Asset\n  ///    Emits \"ERC6551AccountCreated\" event when a new wallet is created\n  ///\n  /// @param contractAddress      The Address to the Contract of the Token to Energize\n  /// @param tokenId              The ID of the Token to Energize\n  /// @param nftTokenAddress      The Address of the NFT Token being deposited\n  /// @param nftTokenId           The ID of the NFT Token being deposited\n  /// @param nftTokenAmount       The amount of Tokens to Deposit (ERC1155-specific)\n  /// @return success             True if the operation succeeded (for backwards-compat)\n  function covalentBond(\n    address contractAddress,\n    uint256 tokenId,\n    address nftTokenAddress,\n    uint256 nftTokenId,\n    uint256 nftTokenAmount\n  )\n    external\n    virtual\n    override\n    nonReentrant\n    returns (bool success)\n  {\n    // Find the SmartAccount for this NFT\n    (address account, bool isSmartAccount) = _createAccount(contractAddress, tokenId);\n    ISmartAccount smartAccount = ISmartAccount(payable(account));\n    IERC6551Executable execAccount = IERC6551Executable(account);\n\n    // Transfer to SmartAccount and pre-approve Charged Particles to transfer back out\n    if (nftTokenAddress.isERC1155()) {\n      IERC1155(nftTokenAddress).safeTransferFrom(msg.sender, account, tokenId, nftTokenAmount, \"\");\n      execAccount.execute(nftTokenAddress, 0, abi.encodeWithSelector(IERC1155.setApprovalForAll.selector, address(this), true), 0);\n    } else {\n      IERC721(nftTokenAddress).safeTransferFrom(msg.sender, account, nftTokenId);\n      execAccount.execute(nftTokenAddress, 0, abi.encodeWithSelector(IERC721.setApprovalForAll.selector, address(this), true), 0);\n    }\n\n    // Call \"update\" on SmartAccount\n    if (isSmartAccount) {\n      smartAccount.handleNFTUpdate(true, nftTokenAddress, nftTokenId, nftTokenAmount);\n    }\n    return true;\n  }\n\n  /// @notice Release NFT Assets from the Particle\n  /// @param receiver             The Address to Receive the Released Asset Tokens\n  /// @param contractAddress      The Address to the Contract of the Token to Energize\n  /// @param tokenId              The ID of the Token to Energize\n  /// @param nftTokenAddress      The Address of the NFT Token being deposited\n  /// @param nftTokenId           The ID of the NFT Token being deposited\n  /// @param nftTokenAmount       The amount of Tokens to Withdraw (ERC1155-specific)\n  /// @return success             True if the operation succeeded (for backwards-compat)\n  function breakCovalentBond(\n    address receiver,\n    address contractAddress,\n    uint256 tokenId,\n    address nftTokenAddress,\n    uint256 nftTokenId,\n    uint256 nftTokenAmount\n  )\n    external\n    virtual\n    override\n    onlyNFTOwnerOrOperator(contractAddress, tokenId)\n    nonReentrant\n    returns (bool success)\n  {\n    // Find the SmartAccount for this NFT\n    (address account, bool isSmartAccount) = _findAccount(contractAddress, tokenId);\n\n    // Transfer to Receiver\n    if (nftTokenAddress.isERC1155()) {\n      IERC1155(nftTokenAddress).safeTransferFrom(account, receiver, tokenId, nftTokenAmount, \"\");\n    } else {\n      IERC721(nftTokenAddress).safeTransferFrom(account, receiver, nftTokenId);\n    }\n\n    // Call \"update\" on SmartAccount\n    if (isSmartAccount) {\n      ISmartAccount(payable(account)).handleNFTUpdate(false, nftTokenAddress, nftTokenId, nftTokenAmount);\n    }\n\n    return true;\n  }\n\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // ERC6551 Wallet Registry\n\n  /// @dev ...\n  function getCurrentRegistry() external view returns (address) {\n    return erc6551registry[defaultRegistry];\n  }\n\n  /// @dev ...\n  function getRegistry(uint256 registry) external view returns (address) {\n    return erc6551registry[registry];\n  }\n\n  /// @dev ...\n  function setRegistry(uint256 version, address registry) external onlyOwner {\n    erc6551registry[version] = registry;\n  }\n\n  /// @dev ...\n  function setDefaultRegistryVersion(uint256 version) external onlyOwner {\n    defaultRegistry = version;\n  }\n\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // SmartAccount Execution Controllers\n  //  - any NFT contract can have its own custom execution controller\n\n  /// @dev ...\n  function setDefaultExecutionController(address executionController) public virtual onlyOwner {\n    defaultExecutionController = executionController;\n  }\n\n  /// @dev ...\n  function setCustomExecutionController(address nftContract, address executionController) public virtual onlyOwner {\n    executionControllers[nftContract] = executionController;\n  }\n\n  /// @dev ...\n  function getExecutionController(address nftContract) public view returns (address executionController) {\n    executionController = executionControllers[nftContract];\n    if (executionController == address(0)) {\n      executionController = defaultExecutionController;\n    }\n  }\n\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // SmartAccount Implementations\n  //  - any NFT contract can have its own custom execution controller\n\n  /// @dev ...\n  function setDefaultAccountImplementation(address accountImplementation) public virtual onlyOwner {\n    defaultAccountImplementation = accountImplementation;\n  }\n\n  /// @dev ...\n  function setCustomAccountImplementation(address nftContract, address accountImplementation) public virtual onlyOwner {\n    accountImplementations[nftContract] = accountImplementation;\n  }\n\n  /// @dev ...\n  function getAccountImplementation(address nftContract) public view returns (address accountImplementation) {\n    accountImplementation = accountImplementations[nftContract];\n    if (accountImplementation == address(0)) {\n      accountImplementation = defaultAccountImplementation;\n    }\n  }\n\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // Private Functions\n\n  /// @dev ...\n  function _createAccount(\n    address contractAddress,\n    uint256 tokenId\n  ) internal returns (address account, bool isSmartAccount) {\n    // Create the SmartAccount for this NFT\n    IERC6551Registry registry = IERC6551Registry(erc6551registry[defaultRegistry]);\n    account = registry.createAccount(defaultAccountImplementation, defaultSalt, block.chainid, contractAddress, tokenId);\n    isSmartAccount = IERC165(account).supportsInterface(type(ISmartAccount).interfaceId);\n    ISmartAccount smartAccount = ISmartAccount(payable(account));\n\n    // Initialize the Account\n    if (isSmartAccount && !smartAccount.isInitialized()) {\n      address executionController = getExecutionController(contractAddress);\n      smartAccount.initialize(address(this), executionController);\n    }\n  }\n\n  /// @dev ...\n  function _findAccount(\n    address contractAddress,\n    uint256 tokenId\n  ) internal view returns (address account, bool isSmartAccount) {\n    // Find the SmartAccount for this NFT\n    IERC6551Registry registry = IERC6551Registry(erc6551registry[defaultRegistry]);\n    account = registry.account(defaultAccountImplementation, defaultSalt, block.chainid, contractAddress, tokenId);\n    isSmartAccount = IERC165(account).supportsInterface(type(ISmartAccount).interfaceId);\n  }\n\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // Internal Modifiers\n\n  modifier onlyNFTOwnerOrOperator(address contractAddress, uint256 tokenId) {\n    require(contractAddress.isNFTOwnerOrOperator(tokenId, msg.sender), \"Invalid owner or operator\");\n    _;\n  }\n}"
    },
    "contracts/extensions/SmartAccountTimelocks.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {SmartAccount} from \"../SmartAccount.sol\";\n\nerror AccountLocked();\nerror ExceedsMaxLockTime();\n\n/**\n * @title A smart contract account owned by a single ERC721 token\n */\ncontract SmartAccountTimelocks is SmartAccount {\n  event LockUpdated(uint256 lockedUntil);\n\n  /// @dev timestamp at which this account will be unlocked.\n  /// Attached to \"owner\" so that the lock is cleared when transferred.\n  mapping(address => uint256) public lockedUntil;\n\n  constructor() SmartAccount() {}\n\n  /// @dev returns the current lock status of the account as a boolean\n  function isLocked() public view returns (bool) {\n    return lockedUntil[owner()] > block.timestamp;\n  }\n\n  /// @dev locks the account until a certain timestamp\n  function lock(uint256 _lockedUntil) external onlyValidSigner {\n    if (_lockedUntil > block.timestamp + 365 days) {\n      revert ExceedsMaxLockTime();\n    }\n\n    lockedUntil[owner()] = _lockedUntil;\n\n    emit LockUpdated(_lockedUntil);\n  }\n\n  /// @dev grants a given caller execution permissions\n  function setPermissions(\n    address[] calldata callers,\n    bool[] calldata _permissions\n  ) public virtual override {\n    if (isLocked()) {\n      revert AccountLocked();\n    }\n    return super.setPermissions(callers, _permissions);\n  }\n\n  /// @dev executes a low-level call against an account if the caller is authorized to make calls\n  function execute(\n    address to,\n    uint256 value,\n    bytes calldata data,\n    uint8 operation\n  ) public payable virtual override returns (bytes memory) {\n    if (isLocked()) { revert AccountLocked(); }\n    return super.execute(to, value, data, operation);\n  }\n\n  function handleTokenUpdate(\n    bool isReceiving,\n    address assetToken,\n    uint256 assetAmount\n  ) public virtual override {\n    if (isLocked()) { revert AccountLocked(); }\n    return super.handleTokenUpdate(isReceiving, assetToken, assetAmount);\n  }\n\n  function handleNFTUpdate(\n    bool isReceiving,\n    address tokenContract,\n    uint256 tokenId,\n    uint256 tokenAmount\n  ) public virtual override {\n    if (isLocked()) { revert AccountLocked(); }\n    return super.handleNFTUpdate(isReceiving, tokenContract, tokenId, tokenAmount);\n  }\n\n  function handleNFTBatchUpdate(\n    bool isReceiving,\n    address tokenContract,\n    uint256[] calldata tokenIds,\n    uint256[] calldata tokenAmounts\n  ) public virtual override {\n    if (isLocked()) { revert AccountLocked(); }\n    return super.handleNFTBatchUpdate(isReceiving, tokenContract, tokenIds, tokenAmounts);\n  }\n}\n"
    },
    "contracts/interfaces/IChargedParticles.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IChargedParticles.sol -- Part of the Charged Particles Protocol\n// Copyright (c) 2024 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity ^0.8.13;\n\n/**\n * @notice Interface for Charged Particles\n */\ninterface IChargedParticles {\n\n  function setDefaultExecutionController(address executionController) external;\n  function setCustomExecutionController(address nftContract, address executionController) external;\n  function getExecutionController(address nftContract) external view returns (address executionController);\n\n  /***********************************|\n  |        Particle Mechanics         |\n  |__________________________________*/\n\n  function getSmartAccountAddress(address contractAddress, uint256 tokenId) external view returns (address);\n  function baseParticleMass(address contractAddress, uint256 tokenId, address assetToken) external view returns (uint256 total);\n  function currentParticleCharge(address contractAddress, uint256 tokenId, address assetToken) external view returns (uint256 total);\n  function currentParticleKinetics(address contractAddress, uint256 tokenId, address assetToken) external view returns (uint256 total);\n  function currentParticleCovalentBonds(address contractAddress, uint256 tokenId, address nftContractAddress, uint256 nftTokenId) external view returns (uint256 total);\n\n  function energizeParticle(\n    address contractAddress,\n    uint256 tokenId,\n    address assetToken,\n    uint256 assetAmount\n  ) external returns (address account);\n\n\n  function energizeParticleWithPermit(\n    address contractAddress,\n    uint256 tokenId,\n    address assetToken,\n    uint256 assetAmount,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (address account);\n\n  function releaseParticle(\n    address receiver,\n    address contractAddress,\n    uint256 tokenId,\n    address assetToken\n  ) external returns (uint256 amount);\n\n  function releaseParticleAmount(\n    address receiver,\n    address contractAddress,\n    uint256 tokenId,\n    address assetToken,\n    uint256 assetAmount\n  ) external returns (uint256 amount);\n\n  function covalentBond(\n    address contractAddress,\n    uint256 tokenId,\n    address nftTokenAddress,\n    uint256 nftTokenId,\n    uint256 nftTokenAmount\n  ) external returns (bool success);\n\n  function breakCovalentBond(\n    address receiver,\n    address contractAddress,\n    uint256 tokenId,\n    address nftTokenAddress,\n    uint256 nftTokenId,\n    uint256 nftTokenAmount\n  ) external returns (bool success);\n}"
    },
    "contracts/interfaces/IDynamicTraits.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// IDynamicTraits.sol -- Part of the Charged Particles Protocol\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity ^0.8.13;\n\ninterface IDynamicTraits {\n  function getTraits(uint256 tokenId) external view returns (uint256);\n  function hasTrait(uint256 tokenId, uint256 trait) external view returns (bool);\n  function traitCount(uint256 tokenId) external view returns (uint256 totalTraits);\n}\n"
    },
    "contracts/interfaces/IERC6551Account.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\n/// @dev the ERC-165 identifier for this interface is `0x6faff5f1`\ninterface IERC6551Account {\n    /**\n     * @dev Allows the account to receive Ether.\n     *\n     * Accounts MUST implement a `receive` function.\n     *\n     * Accounts MAY perform arbitrary logic to restrict conditions\n     * under which Ether can be received.\n     */\n    receive() external payable;\n\n    /**\n     * @dev Returns the identifier of the non-fungible token which owns the account.\n     *\n     * The return value of this function MUST be constant - it MUST NOT change over time.\n     *\n     * @return chainId       The chain ID of the chain the token exists on\n     * @return tokenContract The contract address of the token\n     * @return tokenId       The ID of the token\n     */\n    function token()\n        external\n        view\n        returns (uint256 chainId, address tokenContract, uint256 tokenId);\n\n    /**\n     * @dev Returns a value that SHOULD be modified each time the account changes state.\n     *\n     * @return The current account state\n     */\n    function state() external view returns (uint256);\n\n    /**\n     * @dev Returns a magic value indicating whether a given signer is authorized to act on behalf\n     * of the account.\n     *\n     * MUST return the bytes4 magic value 0x523e3260 if the given signer is valid.\n     *\n     * By default, the holder of the non-fungible token the account is bound to MUST be considered\n     * a valid signer.\n     *\n     * Accounts MAY implement additional authorization logic which invalidates the holder as a\n     * signer or grants signing permissions to other non-holder accounts.\n     *\n     * @param  signer     The address to check signing authorization for\n     * @param  context    Additional data used to determine whether the signer is valid\n     * @return magicValue Magic value indicating whether the signer is valid\n     */\n    function isValidSigner(address signer, bytes calldata context)\n        external\n        view\n        returns (bytes4 magicValue);\n}\n\n"
    },
    "contracts/interfaces/IERC6551Executable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\n/// @dev the ERC-165 identifier for this interface is `0x51945447`\ninterface IERC6551Executable {\n    /**\n     * @dev Executes a low-level operation if the caller is a valid signer on the account.\n     *\n     * Reverts and bubbles up error if operation fails.\n     *\n     * Accounts implementing this interface MUST accept the following operation parameter values:\n     * - 0 = CALL\n     * - 1 = DELEGATECALL\n     * - 2 = CREATE\n     * - 3 = CREATE2\n     *\n     * Accounts implementing this interface MAY support additional operations or restrict a signer's\n     * ability to execute certain operations.\n     *\n     * @param to        The target address of the operation\n     * @param value     The Ether value to be sent to the target\n     * @param data      The encoded operation calldata\n     * @param operation A value indicating the type of operation to perform\n     * @return The result of the operation\n     */\n    function execute(address to, uint256 value, bytes calldata data, uint8 operation)\n        external\n        payable\n        returns (bytes memory);\n}\n"
    },
    "contracts/interfaces/IERC6551Registry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ninterface IERC6551Registry {\n    /**\n     * @dev The registry MUST emit the ERC6551AccountCreated event upon successful account creation.\n     */\n    event ERC6551AccountCreated(\n        address account,\n        address indexed implementation,\n        bytes32 salt,\n        uint256 chainId,\n        address indexed tokenContract,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev The registry MUST revert with AccountCreationFailed error if the create2 operation fails.\n     */\n    error AccountCreationFailed();\n\n    /**\n     * @dev Creates a token bound account for a non-fungible token.\n     *\n     * If account has already been created, returns the account address without calling create2.\n     *\n     * Emits ERC6551AccountCreated event.\n     *\n     * @return account The address of the token bound account\n     */\n    function createAccount(\n        address implementation,\n        bytes32 salt,\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId\n    ) external returns (address account);\n\n    /**\n     * @dev Returns the computed token bound account address for a non-fungible token.\n     *\n     * @return account The address of the token bound account\n     */\n    function account(\n        address implementation,\n        bytes32 salt,\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId\n    ) external view returns (address account);\n}"
    },
    "contracts/interfaces/ISmartAccount.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// ISmartAccount.sol -- Part of the Charged Particles Protocol\n// Copyright (c) 2024 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity ^0.8.13;\n\nimport {IERC6551Account} from \"../interfaces/IERC6551Account.sol\";\nimport {IERC6551Executable} from \"../interfaces/IERC6551Executable.sol\";\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport {IERC1155Receiver} from \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\n\n/**\n * @title A smart contract account owned by a single ERC721 token\n */\ninterface ISmartAccount is\n  IERC165,\n  IERC6551Account,\n  IERC6551Executable,\n  IERC721Receiver,\n  IERC1155Receiver\n{\n  event PermissionUpdated(address owner, address caller, bool hasPermission);\n  event ExecutionControllerUpdated(address owner, address controller);\n\n  function isInitialized() external returns (bool);\n  function initialize(\n    address chargedParticles,\n    address executionController\n  ) external;\n\n  function getPrincipal(address assetToken) external view returns (uint256 total);\n  function getInterest(address assetToken) external view returns (uint256 total);\n  function getRewards(address assetToken) external view returns (uint256 total);\n  function getCovalentBonds(address nftContractAddress, uint256 nftTokenId) external view returns (uint256 total);\n\n  function handleTokenUpdate(\n    bool isReceiving,\n    address assetToken,\n    uint256 assetAmount\n  ) external;\n\n  function handleNFTUpdate(\n    bool isReceiving,\n    address tokenContract,\n    uint256 tokenId,\n    uint256 tokenAmount\n  ) external;\n\n  function handleNFTBatchUpdate(\n    bool isReceiving,\n    address tokenContract,\n    uint256[] calldata tokenIds,\n    uint256[] calldata tokenAmounts\n  ) external;\n}"
    },
    "contracts/interfaces/ISmartAccountController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title\n */\ninterface ISmartAccountController is IERC165 {\n  function onExecute(\n    address to,\n    uint256 value,\n    bytes calldata data,\n    uint8 operation\n  ) external returns (string memory revertReason);\n\n  function onUpdateToken(\n    bool isReceiving,\n    uint256 chainId,\n    address tokenContract,\n    uint256 tokenId,\n    address receivedAssetToken,\n    uint256 receivedAssetAmount\n  ) external;\n\n  function onUpdateNFT(\n    bool isReceiving,\n    uint256 chainId,\n    address tokenContract,\n    uint256 tokenId,\n    address receivedTokenContract,\n    uint256 receivedTokenId,\n    uint256 receivedTokenAmount\n  ) external;\n\n  function onUpdateNFTBatch(\n    bool isReceiving,\n    uint256 chainId,\n    address tokenContract,\n    uint256 tokenId,\n    address receivedTokenContract,\n    uint256[] calldata receivedTokenIds,\n    uint256[] calldata receivedTokenAmounts\n  ) external;\n}\n"
    },
    "contracts/lib/ERC6551AccountLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\nimport \"./ERC6551BytecodeLib.sol\";\n\nlibrary ERC6551AccountLib {\n    function computeAddress(\n        address registry,\n        address _implementation,\n        bytes32 _salt,\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId\n    ) internal pure returns (address) {\n        bytes32 bytecodeHash = keccak256(\n            ERC6551BytecodeLib.getCreationCode(\n                _implementation, _salt, chainId, tokenContract, tokenId\n            )\n        );\n\n        return Create2.computeAddress(_salt, bytecodeHash, registry);\n    }\n\n    function isERC6551Account(address account, address expectedImplementation, address registry)\n        internal\n        view\n        returns (bool)\n    {\n        // invalid bytecode size\n        if (account.code.length != 0xAD) return false;\n\n        address _implementation = implementation(account);\n\n        // implementation does not exist\n        if (_implementation.code.length == 0) return false;\n\n        // invalid implementation\n        if (_implementation != expectedImplementation) return false;\n\n        (bytes32 _salt, uint256 chainId, address tokenContract, uint256 tokenId) = context(account);\n\n        return account\n            == computeAddress(registry, _implementation, _salt, chainId, tokenContract, tokenId);\n    }\n\n    function implementation(address account) internal view returns (address _implementation) {\n        assembly {\n            // copy proxy implementation (0x14 bytes)\n            extcodecopy(account, 0xC, 0xA, 0x14)\n            _implementation := mload(0x00)\n        }\n    }\n\n    function implementation() internal view returns (address _implementation) {\n        return implementation(address(this));\n    }\n\n    function token(address account) internal view returns (uint256, address, uint256) {\n        bytes memory encodedData = new bytes(0x60);\n\n        assembly {\n            // copy 0x60 bytes from end of context\n            extcodecopy(account, add(encodedData, 0x20), 0x4d, 0x60)\n        }\n\n        return abi.decode(encodedData, (uint256, address, uint256));\n    }\n\n    function token() internal view returns (uint256, address, uint256) {\n        return token(address(this));\n    }\n\n    function salt(address account) internal view returns (bytes32) {\n        bytes memory encodedData = new bytes(0x20);\n\n        assembly {\n            // copy 0x20 bytes from beginning of context\n            extcodecopy(account, add(encodedData, 0x20), 0x2d, 0x20)\n        }\n\n        return abi.decode(encodedData, (bytes32));\n    }\n\n    function salt() internal view returns (bytes32) {\n        return salt(address(this));\n    }\n\n    function context(address account) internal view returns (bytes32, uint256, address, uint256) {\n        bytes memory encodedData = new bytes(0x80);\n\n        assembly {\n            // copy full context (0x80 bytes)\n            extcodecopy(account, add(encodedData, 0x20), 0x2D, 0x80)\n        }\n\n        return abi.decode(encodedData, (bytes32, uint256, address, uint256));\n    }\n\n    function context() internal view returns (bytes32, uint256, address, uint256) {\n        return context(address(this));\n    }\n}"
    },
    "contracts/lib/ERC6551BytecodeLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nlibrary ERC6551BytecodeLib {\n    /**\n     * @dev Returns the creation code of the token bound account for a non-fungible token.\n     *\n     * @return result The creation code of the token bound account\n     */\n    function getCreationCode(\n        address implementation,\n        bytes32 salt,\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId\n    ) internal pure returns (bytes memory result) {\n        assembly {\n            result := mload(0x40) // Grab the free memory pointer\n            // Layout the variables and bytecode backwards\n            mstore(add(result, 0xb7), tokenId)\n            mstore(add(result, 0x97), shr(96, shl(96, tokenContract)))\n            mstore(add(result, 0x77), chainId)\n            mstore(add(result, 0x57), salt)\n            mstore(add(result, 0x37), 0x5af43d82803e903d91602b57fd5bf3)\n            mstore(add(result, 0x28), implementation)\n            mstore(add(result, 0x14), 0x3d60ad80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(result, 0xb7) // Store the length\n            mstore(0x40, add(result, 0xd7)) // Allocate the memory\n        }\n    }\n\n    /**\n     * @dev Returns the create2 address computed from `salt`, `bytecodeHash`, `deployer`.\n     *\n     * @return result The create2 address computed from `salt`, `bytecodeHash`, `deployer`\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer)\n        internal\n        pure\n        returns (address result)\n    {\n        assembly {\n            result := mload(0x40) // Grab the free memory pointer\n            mstore8(result, 0xff)\n            mstore(add(result, 0x35), bytecodeHash)\n            mstore(add(result, 0x01), shl(96, deployer))\n            mstore(add(result, 0x15), salt)\n            result := keccak256(result, 0x55)\n        }\n    }\n}"
    },
    "contracts/lib/NftTokenInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// NftTokenInfo.sol -- Part of the Charged Particles Protocol\n// Copyright (c) 2024 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity ^0.8.13;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC1271} from \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\n\nlibrary NftTokenInfo {\n  bytes4 constant internal INTERFACE_SIGNATURE_ERC721 = 0x80ac58cd;\n  bytes4 constant internal INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\n\n  function isERC721(address contractAddress) internal view returns (bool) {\n    return IERC165(contractAddress).supportsInterface(INTERFACE_SIGNATURE_ERC721);\n  }\n\n  function isERC1155(address contractAddress) internal view returns (bool) {\n    return IERC165(contractAddress).supportsInterface(INTERFACE_SIGNATURE_ERC1155);\n  }\n\n  function getTokenUUID(address contractAddress, uint256 tokenId) internal pure returns (uint256) {\n    return uint256(keccak256(abi.encodePacked(contractAddress, tokenId)));\n  }\n\n  function getTokenOwner(address contractAddress, uint256 tokenId) internal returns (address) {\n    return _getTokenOwner(contractAddress, tokenId);\n  }\n\n  function isNFTOwnerOrOperator(address contractAddress, uint256 tokenId, address sender) internal returns (bool) {\n    IERC721 tokenInterface = IERC721(contractAddress);\n    address tokenOwner = _getTokenOwner(contractAddress, tokenId);\n    return (sender == tokenOwner || tokenInterface.isApprovedForAll(tokenOwner, sender));\n  }\n\n  function _getTokenOwner(address contractAddress, uint256 tokenId) internal returns (address) {\n    // solhint-disable-next-line\n    (bool success, bytes memory returnData) = contractAddress.call(abi.encodeWithSelector(IERC721.ownerOf.selector, tokenId));\n    if (success) {\n      return abi.decode(returnData, (address));\n    } else {\n      return address(0x0);\n    }\n  }\n}"
    },
    "contracts/lib/SmartAccountBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SmartAccountBase.sol -- Part of the Charged Particles Protocol\n// Copyright (c) 2024 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity ^0.8.13;\n\nimport {IERC165, ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC1271} from \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport {IERC1155Receiver} from \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\n\nimport {IERC6551Account} from \"../interfaces/IERC6551Account.sol\";\nimport {ERC6551AccountLib} from \"../lib/ERC6551AccountLib.sol\";\nimport {IERC6551Executable} from \"../interfaces/IERC6551Executable.sol\";\n\nimport {ISmartAccount} from \"../interfaces/ISmartAccount.sol\";\nimport {ISmartAccountController} from \"../interfaces/ISmartAccountController.sol\";\n\n// import \"hardhat/console.sol\";\n\nerror AlreadyInitialized();\nerror NotAuthorized();\nerror InvalidInput();\nerror OwnershipCycle();\n\n/**\n * @title A smart contract account owned by a single ERC721 token\n */\nabstract contract SmartAccountBase is ISmartAccount, ERC165 {\n  address internal _chargedParticles;\n  address internal _executionController;\n\n  /// @dev mapping from owner => caller => has permissions\n  mapping(address => mapping(address => bool)) internal _permissions;\n\n  bool internal _initialized;\n  constructor() {}\n\n  function initialize(\n    address chargedParticles,\n    address executionController\n  ) external {\n    if (_initialized) { revert AlreadyInitialized(); }\n    _initialized = true;\n    _chargedParticles = chargedParticles;\n    _executionController = executionController;\n  }\n\n  /// @dev allows eth transfers by default, but allows account owner to override\n  receive() external payable virtual override {}\n\n  function isInitialized() external view virtual override returns (bool) {\n    return _initialized;\n  }\n\n  function permissions(address _owner, address caller) public view virtual returns (bool) {\n    return _permissions[_owner][caller];\n  }\n\n  function getChargedParticles() public view virtual returns (address) {\n    return _chargedParticles;\n  }\n\n  function setChargedParticles(address chargedParticles) public virtual onlyOwner {\n    if (chargedParticles == address(0)) { revert InvalidInput(); }\n    _chargedParticles = chargedParticles;\n  }\n\n  function getExecutionController() public view virtual returns (address) {\n    return _executionController;\n  }\n\n  function setExecutionController(address executionController) public virtual onlyOwner {\n    _executionController = executionController;\n    emit ExecutionControllerUpdated(msg.sender, executionController);\n  }\n\n  /// @dev Returns the EIP-155 chain ID, token contract address, and token ID for the token that\n  /// owns this account.\n  function token()\n    public\n    view\n    virtual\n    returns (uint256, address, uint256)\n  {\n    return ERC6551AccountLib.token();\n  }\n\n  /// @dev Returns the owner of the ERC-721 token which owns this account. By default, the owner\n  /// of the token has full permissions on the account.\n  function owner() public view virtual returns (address) {\n    (uint256 chainId, address tokenContract, uint256 tokenId) = token();\n    if (chainId != block.chainid) { return address(0); }\n\n    try IERC721(tokenContract).ownerOf(tokenId) returns (address _owner) {\n      return _owner;\n    } catch {\n      return address(0);\n    }\n  }\n\n  function isValidSigner(address signer, bytes calldata) external view virtual returns (bytes4) {\n    if (_isValidSigner(signer)) {\n      return IERC6551Account.isValidSigner.selector;\n    }\n    return bytes4(0);\n  }\n\n  /// @dev grants a given caller execution permissions\n  function setPermissions(address[] calldata callers, bool[] calldata newPermissions) public virtual {\n    address _owner = owner();\n    if (msg.sender != _owner) { revert NotAuthorized(); }\n\n    uint256 length = callers.length;\n    if (newPermissions.length != length) { revert InvalidInput(); }\n\n    for (uint256 i = 0; i < length; i++) {\n      _permissions[_owner][callers[i]] = newPermissions[i];\n      emit PermissionUpdated(_owner, callers[i], newPermissions[i]);\n    }\n  }\n\n  /// @dev Returns true if a given interfaceId is supported by this account. This method can be\n  /// extended by an override.\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(IERC165, ERC165)\n    returns (bool)\n  {\n    return interfaceId == type(IERC6551Account).interfaceId\n      || interfaceId == type(IERC6551Executable).interfaceId\n      || interfaceId == type(ISmartAccount).interfaceId\n      || super.supportsInterface(interfaceId);\n  }\n\n  /// @dev Allows ERC-721 tokens to be received so long as they do not cause an ownership cycle.\n  /// This function can be overriden.\n  function onERC721Received(\n    address,\n    address,\n    uint256 receivedTokenId,\n    bytes memory\n  ) public view virtual override returns (bytes4) {\n    (\n      uint256 chainId,\n      address tokenContract,\n      uint256 tokenId\n    ) = token();\n\n    if (chainId == block.chainid && tokenContract == msg.sender && tokenId == receivedTokenId) {\n      revert OwnershipCycle();\n    }\n    return this.onERC721Received.selector;\n  }\n\n  /// @dev Allows ERC-1155 tokens to be received. This function can be overriden.\n  function onERC1155Received(\n    address,\n    address,\n    uint256,\n    uint256,\n    bytes memory\n  ) public pure virtual override returns (bytes4) {\n    return this.onERC1155Received.selector;\n  }\n\n  /// @dev Allows ERC-1155 token batches to be received. This function can be overriden.\n  function onERC1155BatchReceived(\n    address,\n    address,\n    uint256[] memory,\n    uint256[] memory,\n    bytes memory\n  ) public pure virtual override returns (bytes4) {\n    return this.onERC1155BatchReceived.selector;\n  }\n\n  /// @dev Executes a low-level call\n  function _call(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) internal returns (bytes memory result) {\n    bool success;\n    // solhint-disable-next-line avoid-low-level-calls\n    (success, result) = to.call{value: value}(data);\n\n    if (!success) {\n      assembly {\n        revert(add(result, 32), mload(result))\n      }\n    }\n  }\n\n  function _onExecute(\n    address to,\n    uint256 value,\n    bytes calldata data,\n    uint8 operation\n  ) internal {\n    if (IERC165(_executionController).supportsInterface(type(ISmartAccountController).interfaceId)) {\n      string memory revertReason = ISmartAccountController(_executionController).onExecute(to, value, data, operation);\n      if (bytes(revertReason).length > 0) {\n        revert(revertReason);\n      }\n    }\n  }\n\n  function _onUpdateToken(\n    bool isReceiving,\n    address assetToken,\n    uint256 assetAmount\n  ) internal {\n    if (IERC165(_executionController).supportsInterface(type(ISmartAccountController).interfaceId)) {\n      (uint256 chainId, address tokenContract, uint256 tokenId) = token();\n      ISmartAccountController(_executionController)\n        .onUpdateToken(isReceiving, chainId, tokenContract, tokenId, assetToken, assetAmount);\n    }\n  }\n\n  function _onUpdateNFT(\n    bool isReceiving,\n    address childTokenContract,\n    uint256 childTokenId,\n    uint256 childTokenAmount\n  ) internal {\n    if (IERC165(_executionController).supportsInterface(type(ISmartAccountController).interfaceId)) {\n      (uint256 chainId, address tokenContract, uint256 tokenId) = token();\n      ISmartAccountController(_executionController)\n        .onUpdateNFT(isReceiving, chainId, tokenContract, tokenId, childTokenContract, childTokenId, childTokenAmount);\n    }\n  }\n\n  function _onUpdateNFTBatch(\n    bool isReceiving,\n    address childTokenContract,\n    uint256[] calldata childTokenIds,\n    uint256[] calldata childTokenAmounts\n  ) internal {\n    if (IERC165(_executionController).supportsInterface(type(ISmartAccountController).interfaceId)) {\n      (uint256 chainId, address tokenContract, uint256 tokenId) = token();\n      ISmartAccountController(_executionController)\n        .onUpdateNFTBatch(isReceiving, chainId, tokenContract, tokenId, childTokenContract, childTokenIds, childTokenAmounts);\n    }\n  }\n\n  function _isValidSigner(address signer) internal view virtual returns (bool) {\n    address ownerOf = owner();\n\n    // Charged Particles & Execution Controller always have permissions\n    if (signer == _chargedParticles) { return true; }\n    if (signer == _executionController) { return true; }\n\n    // authorize caller if owner has granted permissions\n    if (_permissions[ownerOf][signer]) { return true; }\n\n    // authorize token owner\n    return signer == ownerOf;\n  }\n\n  /// @dev reverts if caller is not the owner of the NFT which owns the account\n  modifier onlyOwner() {\n    if (msg.sender != owner()) { revert NotAuthorized(); }\n    _;\n  }\n\n  /// @dev reverts if caller is not authorized to execute on this account\n  modifier onlyValidSigner() {\n    if (!_isValidSigner(msg.sender)) { revert NotAuthorized(); }\n    _;\n  }\n}"
    },
    "contracts/SmartAccount.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// SmartAccount.sol -- Part of the Charged Particles Protocol\n// Copyright (c) 2024 Firma Lux, Inc. <https://charged.fi>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\npragma solidity ^0.8.13;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport {NftTokenInfo} from \"./lib/NftTokenInfo.sol\";\nimport {SmartAccountBase, NotAuthorized, InvalidInput} from \"./lib/SmartAccountBase.sol\";\n\n/**\n * @title A smart contract account owned by a single ERC721 token\n */\ncontract SmartAccount is SmartAccountBase {\n  using NftTokenInfo for address;\n\n  uint256 public state;\n\n  constructor() SmartAccountBase() {}\n\n\n  /// @dev allows eth transfers by default\n  receive() external payable virtual override {}\n\n\n\n  function getPrincipal(address assetToken) external view virtual override returns (uint256 total) {\n    total = IERC20(assetToken).balanceOf(address(this));\n  }\n\n  function getInterest(address /* assetToken */) external view virtual override returns (uint256 total) {\n    return 0;\n  }\n\n  function getRewards(address /* assetToken */) external view virtual override returns (uint256 total) {\n    return 0;\n  }\n\n  function getCovalentBonds(address nftContractAddress, uint256 nftTokenId) external view virtual override returns (uint256 total) {\n    if (nftContractAddress.isERC1155()) {\n      total = IERC1155(nftContractAddress).balanceOf(address(this), nftTokenId);\n    } else {\n      total = IERC721(nftContractAddress).balanceOf(address(this));\n    }\n  }\n\n\n\n  /// @dev executes a low-level call against an account if the caller is authorized to make calls\n  function execute(\n    address to,\n    uint256 value,\n    bytes calldata data,\n    uint8 operation\n  )\n    public\n    payable\n    virtual\n    override\n    onlyValidSigner\n    returns (bytes memory)\n  {\n    require(operation == 0, \"Only call operations are supported\");\n    ++state;\n\n    // Perform custom checks/updates from within a custom controller\n    _onExecute(to, value, data, operation);\n\n    // Execute Call on Account\n    return _call(to, value, data);\n  }\n\n\n  function handleTokenUpdate(\n    bool isReceiving,\n    address assetToken,\n    uint256 assetAmount\n  )\n    public\n    virtual\n    override\n    onlyValidSigner\n  {\n    // Perform custom checks/updates from within a custom controller\n    _onUpdateToken(isReceiving, assetToken, assetAmount);\n  }\n\n  function handleNFTUpdate(\n    bool isReceiving,\n    address tokenContract,\n    uint256 tokenId,\n    uint256 tokenAmount\n  )\n    public\n    virtual\n    override\n    onlyValidSigner\n  {\n    // Perform custom checks/updates from within a custom controller\n    _onUpdateNFT(isReceiving, tokenContract, tokenId, tokenAmount);\n  }\n\n  function handleNFTBatchUpdate(\n    bool isReceiving,\n    address tokenContract,\n    uint256[] calldata tokenIds,\n    uint256[] calldata tokenAmounts\n  )\n    public\n    virtual\n    override\n    onlyValidSigner\n  {\n    // Perform custom checks/updates from within a custom controller\n    _onUpdateNFTBatch(isReceiving, tokenContract, tokenIds, tokenAmounts);\n  }\n}"
    },
    "erc20permit/contracts/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/53516bc555a454862470e7860a9b5254db4d00f5/contracts/token/ERC20/ERC20Permit.sol\npragma solidity ^0.8.0;\n\nimport \"acc-erc20/contracts/ERC20.sol\";\nimport \"./IERC2612.sol\";\n\n/**\n * @author Georgios Konstantopoulos\n * @dev Extension of {ERC20} that allows token holders to use their tokens\n * without sending any transactions by setting {IERC20-allowance} with a\n * signature using the {permit} method, and then spend them via\n * {IERC20-transferFrom}.\n *\n * The {permit} signature mechanism conforms to the {IERC2612} interface.\n */\nabstract contract ERC20Permit is ERC20, IERC2612 {\n    mapping (address => uint256) public override nonces;\n\n    bytes32 public immutable PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public immutable DOMAIN_SEPARATOR;\n\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name_)),\n                keccak256(bytes(version())),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    /// @dev Setting the version as a function so that it can be overriden\n    function version() public pure virtual returns(string memory) { return \"1\"; }\n\n    /**\n     * @dev See {IERC2612-permit}.\n     *\n     * In cases where the free option is not a concern, deadline can simply be\n     * set to uint(-1), so it should be seen as an optional parameter\n     */\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\n        require(deadline >= block.timestamp, \"ERC20Permit: expired deadline\");\n\n        bytes32 hashStruct = keccak256(\n            abi.encode(\n                PERMIT_TYPEHASH,\n                owner,\n                spender,\n                amount,\n                nonces[owner]++,\n                deadline\n            )\n        );\n\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                hashStruct\n            )\n        );\n\n        address signer = ecrecover(hash, v, r, s);\n        require(\n            signer != address(0) && signer == owner,\n            \"ERC20Permit: invalid signature\"\n        );\n\n        _approve(owner, spender, amount);\n    }\n}\n"
    },
    "erc20permit/contracts/IERC2612.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC2612 standard as defined in the EIP.\n *\n * Adds the {permit} method, which can be used to change one's\n * {IERC20-allowance} without having to send a transaction, by signing a\n * message. This allows users to spend tokens without having to hold Ether.\n *\n * See https://eips.ethereum.org/EIPS/eip-2612.\n */\ninterface IERC2612 {\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\n     * given `owner`'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}